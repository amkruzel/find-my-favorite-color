{
  "version": 3,
  "sources": ["../scripts/game.ts", "game.test.ts", "tests.ts"],
  "sourcesContent": ["export interface Game {\n    eliminatedColors: Uint32Array\n    selectedColors: Uint32Array\n    color1: color\n    color2: color\n    favoriteColor?: color\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n    _colors: color[]\n}\n\nexport type color = number & { __type: color }\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error('Not a color!')\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\nexport function createGame(): Game {\n    const _colors = _getAvailableColors()\n    const [color1, color2] = _getTwoUniqueColors(_colors)\n\n    const game: Game = {\n        eliminatedColors: new Uint32Array(0x80000),\n        selectedColors: new Uint32Array(0x80000),\n        currentIteration: 1,\n        colorsRemainingCurrentIteration: 0x1000000,\n        color1,\n        color2,\n        _colors,\n    }\n\n    return game\n}\n\nexport function selectColor(game: Game, num: 1 | 2): void {\n    _updateSelectedColors(game, num)\n    game.colorsRemainingCurrentIteration -= 2\n    _checkForNewIteration(game)\n    _checkForFavoriteColor(game, num)\n    pickTwoColors(game)\n}\n\nexport function pickTwoColors(game: Game): void {\n    if (game._colors.length < 2) {\n        return\n    }\n\n    game.color1 = game._colors.pop()!\n    game.color2 = game._colors.pop()!\n}\n\nexport function reset(game: Game) {\n    const _colors = _getAvailableColors()\n    const [color1, color2] = _getTwoUniqueColors(_colors)\n\n    game.eliminatedColors = new Uint32Array(0x80000)\n    game.selectedColors = new Uint32Array(0x80000)\n    game.currentIteration = 1\n    game.colorsRemainingCurrentIteration = 0x1000000\n    game.color1 = color1\n    game.color2 = color2\n    game._colors = _colors\n}\n\nexport function shuffleColors(game: Game): void {\n    game._colors.push(game.color1)\n    game._colors.push(game.color2)\n    shuffle(game._colors)\n    pickTwoColors(game)\n}\n\nexport function isEliminated(game: Game, color: color): boolean {\n    return _is('eliminated', game, color)\n}\n\nexport function isSelected(game: Game, color: color): boolean {\n    return _is('selected', game, color)\n}\n\nfunction _is(\n    testingFor: 'eliminated' | 'selected',\n    game: Game,\n    color: number\n): boolean {\n    const [index, bit] = _split(color)\n\n    let num: number | undefined\n    if (testingFor === 'eliminated') {\n        num = game.eliminatedColors[index]\n    } else {\n        num = game.selectedColors[index]\n    }\n\n    if (num === undefined) {\n        return false\n    }\n\n    return !!(num & bit)\n}\n\nexport function _split(color: number): [index, bit] {\n    const [index, bit] = [color >> 5, 2 ** (color & 31)]\n    assertIndex(index)\n    assertBit(bit)\n    return [index, bit]\n}\n\nfunction _do(action: 'select' | 'eliminate', game: Game, color: number): void {\n    const [index, bit] = _split(color)\n    const array = action === 'select' ? 'selectedColors' : 'eliminatedColors'\n\n    game[array][index] |= bit\n}\n\nfunction _getTwoUniqueColors(colors?: color[]): [color, color] {\n    if (colors) {\n        const color1 = colors.pop()!\n        const color2 = colors.pop()!\n\n        return [color1, color2]\n    }\n\n    const color1 = Math.floor(Math.random() * 0x1000000)\n    let color2 = Math.floor(Math.random() * 0x1000000)\n\n    while (color2 == color1) {\n        color2 = Math.floor(Math.random() * 0x1000000)\n    }\n\n    assertColor(color1)\n    assertColor(color2)\n\n    return [color1, color2]\n}\n\nfunction _updateSelectedColors(game: Game, num: 1 | 2) {\n    const selectedColor = num === 1 ? game.color1 : game.color2\n    const rejectedColor = num === 1 ? game.color2 : game.color1\n\n    _do('select', game, selectedColor)\n    _do('eliminate', game, rejectedColor)\n}\n\nfunction _checkForNewIteration(game: Game): void {\n    if (game.colorsRemainingCurrentIteration !== 0) {\n        return\n    }\n\n    game.colorsRemainingCurrentIteration =\n        0x1000000 / 2 ** game.currentIteration\n    game.currentIteration++\n    game.selectedColors = new Uint32Array(0x80000)\n}\n\nfunction _checkForFavoriteColor(game: Game, num: 1 | 2): void {\n    if (game.colorsRemainingCurrentIteration !== 1) {\n        return\n    }\n\n    game.favoriteColor = num === 1 ? game.color1 : game.color2\n    game.color2 = game.color1\n}\n\nexport function _getAvailableColors(): color[] {\n    const availColors: color[] = []\n\n    for (let i = 0; i < 0x1000000; i++) {\n        availColors.push(i as color)\n    }\n\n    return shuffle(availColors)\n}\n\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import {\n    Game,\n    _split,\n    color,\n    createGame,\n    isEliminated,\n    isSelected,\n    selectColor,\n} from 'scripts/game'\n\n//import * as fs from 'fs'\nimport * as fsPromises from 'fs/promises'\n\nconst MAX_COLORS = 0x1000000\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfunction loop(g: Game, numLoops: number) {\n    for (let i = 0; i < numLoops; i++) {\n        selectColor(g, 1)\n    }\n}\n\nfunction testSelectColor() {\n    const g = createGame()\n    let selected: color = g.color1\n    let eliminated: color = g.color2\n    selectColor(g, 1)\n\n    assertTrue(isEliminated(g, eliminated))\n    assertTrue(isSelected(g, selected))\n\n    // now do it a bunch more times\n    for (let i = 0; i < 0xffff; i++) {\n        selected = g.color1\n        eliminated = g.color2\n        selectColor(g, 1)\n        //console.log(i)\n        assertTrue(isEliminated(g, eliminated))\n        assertTrue(isSelected(g, selected))\n    }\n\n    console.log('testSelectColor PASS')\n}\n\nfunction testUintArray() {\n    const ary = new Uint32Array(0x80000)\n\n    for (let i = 0; i < MAX_COLORS; i++) {\n        const [index, bit] = _split(i as color)\n\n        const num = ary[index]\n\n        if (num === undefined) {\n            console.log('num is not truthy: ', num)\n            continue\n        }\n\n        assertTrue(!(num & bit))\n        ary[index] |= bit\n    }\n    console.log(ary)\n    console.log('testUintArray PASS')\n}\n\nasync function testColorUniqueness() {\n    async function _assertTrue(val: any) {\n        if (!val) {\n            const elimFh = await fsPromises.open('elim.txt', 'w')\n            const seleFh = await fsPromises.open('sele.txt', 'w')\n            const coloFh = await fsPromises.open('colo.txt', 'w')\n\n            for (let num of g.eliminatedColors) {\n                await elimFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of g.selectedColors) {\n                await seleFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of colors) {\n                await coloFh.write(num.toString() + '\\n')\n            }\n\n            await elimFh.close()\n            await seleFh.close()\n            await coloFh.close()\n\n            throw new Error('val is not true')\n        }\n    }\n\n    console.log('begin testColorUniqueness')\n\n    const g = createGame()\n    const colors = new Set<color>()\n\n    for (let i = 0; i < MAX_COLORS / 2; i++) {\n        await _assertTrue(!colors.has(g.color1))\n        await _assertTrue(!colors.has(g.color2))\n\n        colors.add(g.color1)\n        colors.add(g.color2)\n\n        selectColor(g, 1)\n        // console.log('i: ', i)\n    }\n\n    console.log('end testColorUniqueness')\n    console.log('testColorUniqueness PASS')\n}\n\nfunction testCheckForNewIteration() {\n    const g = createGame()\n    let curColors: number = g.colorsRemainingCurrentIteration\n    let curIter: number = g.currentIteration\n\n    function _assertTrue(val: any) {\n        if (!val) {\n            console.log(g)\n            console.log('curIter: ', curIter)\n            console.log('curColors: ', curColors)\n\n            assertTrue(val)\n        }\n    }\n\n    function assertVals() {\n        _assertTrue(g.currentIteration === curIter)\n        _assertTrue(g.colorsRemainingCurrentIteration === curColors)\n    }\n\n    function incrementVals() {\n        curColors = MAX_COLORS / 2 ** curIter\n        curIter++\n    }\n\n    while (curColors !== 2) {\n        loop(g, MAX_COLORS / 2 ** curIter - 1)\n        _assertTrue(g.currentIteration === curIter)\n        selectColor(g, 1)\n        incrementVals()\n        assertVals()\n    }\n\n    _assertTrue(!g.favoriteColor)\n\n    const c1 = g.color1\n\n    selectColor(g, 1)\n    _assertTrue(g.favoriteColor || g.favoriteColor === 0)\n    _assertTrue(g.favoriteColor === c1)\n    console.log('testCheckForNewIteration PASS')\n}\n\nfunction test_split() {\n    for (let i = 0; i < 1000; i++) {\n        const color = Math.floor(Math.random() * 0x1000000) as color\n\n        const [index, bit] = _split(color)\n\n        const cStr = color.toString(2)\n        const iStr = index.toString(2)\n        const bStr = bit.toString(2)\n\n        console.log(`color: ${cStr}`)\n        console.log(`[${iStr}] [${bStr}]`)\n    }\n}\n\nexport async function gameTests() {\n    testSelectColor()\n    testUintArray()\n    await testColorUniqueness()\n    testCheckForNewIteration()\n    //test_split()\n}\n", "import { gameTests } from './game.test'\nimport { testPerformance } from './performance.test'\n//testPerformance()\ngameTests()\n\n// 4753427\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAeA,SAAS,YAAY,OAAuC;AACxD,MAAI,SAAS,GAAG,KAAK,EAAE,MAAM,SAAS,QAAQ,KAAK,QAAQ,UAAU;AACjE,UAAM,IAAI,MAAM,cAAc;AAAA,EAClC;AACJ;AAEA,SAAS,YAAY,OAAuC;AACxD,MAAI,SAAS,GAAG,KAAK,EAAE,MAAM,SAAS,QAAQ,KAAK,QAAQ,QAAS;AAChE,UAAM,IAAI,MAAM,eAAe;AAAA,EACnC;AACJ;AAEA,SAAS,UAAU,OAAqC;AACpD,MAAI,SAAS,GAAG,KAAK,EAAE,MAAM,SAAS,QAAQ,KAAK,QAAS,QAAQ,GAAI;AACpE,UAAM,IAAI,MAAM,YAAY;AAAA,EAChC;AACJ;AAEO,SAAS,aAAmB;AAC/B,QAAM,UAAU,oBAAoB;AACpC,QAAM,CAAC,QAAQ,MAAM,IAAI,oBAAoB,OAAO;AAEpD,QAAM,OAAa;AAAA,IACf,kBAAkB,IAAI,YAAY,MAAO;AAAA,IACzC,gBAAgB,IAAI,YAAY,MAAO;AAAA,IACvC,kBAAkB;AAAA,IAClB,iCAAiC;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,SAAS,YAAY,MAAY,KAAkB;AACtD,wBAAsB,MAAM,GAAG;AAC/B,OAAK,mCAAmC;AACxC,wBAAsB,IAAI;AAC1B,yBAAuB,MAAM,GAAG;AAChC,gBAAc,IAAI;AACtB;AAEO,SAAS,cAAc,MAAkB;AAC5C,MAAI,KAAK,QAAQ,SAAS,GAAG;AACzB;AAAA,EACJ;AAEA,OAAK,SAAS,KAAK,QAAQ,IAAI;AAC/B,OAAK,SAAS,KAAK,QAAQ,IAAI;AACnC;AAsBO,SAAS,aAAa,MAAYA,QAAuB;AAC5D,SAAO,IAAI,cAAc,MAAMA,MAAK;AACxC;AAEO,SAAS,WAAW,MAAYA,QAAuB;AAC1D,SAAO,IAAI,YAAY,MAAMA,MAAK;AACtC;AAEA,SAAS,IACL,YACA,MACAA,QACO;AACP,QAAM,CAAC,OAAO,GAAG,IAAI,OAAOA,MAAK;AAEjC,MAAI;AACJ,MAAI,eAAe,cAAc;AAC7B,UAAM,KAAK,iBAAiB,KAAK;AAAA,EACrC,OAAO;AACH,UAAM,KAAK,eAAe,KAAK;AAAA,EACnC;AAEA,MAAI,QAAQ,QAAW;AACnB,WAAO;AAAA,EACX;AAEA,SAAO,CAAC,EAAE,MAAM;AACpB;AAEO,SAAS,OAAOA,QAA6B;AAChD,QAAM,CAAC,OAAO,GAAG,IAAI,CAACA,UAAS,GAAG,MAAMA,SAAQ,GAAG;AACnD,cAAY,KAAK;AACjB,YAAU,GAAG;AACb,SAAO,CAAC,OAAO,GAAG;AACtB;AAEA,SAAS,IAAI,QAAgC,MAAYA,QAAqB;AAC1E,QAAM,CAAC,OAAO,GAAG,IAAI,OAAOA,MAAK;AACjC,QAAM,QAAQ,WAAW,WAAW,mBAAmB;AAEvD,OAAK,KAAK,EAAE,KAAK,KAAK;AAC1B;AAEA,SAAS,oBAAoB,QAAkC;AAC3D,MAAI,QAAQ;AACR,UAAMC,UAAS,OAAO,IAAI;AAC1B,UAAMC,UAAS,OAAO,IAAI;AAE1B,WAAO,CAACD,SAAQC,OAAM;AAAA,EAC1B;AAEA,QAAM,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,QAAS;AACnD,MAAI,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,QAAS;AAEjD,SAAO,UAAU,QAAQ;AACrB,aAAS,KAAK,MAAM,KAAK,OAAO,IAAI,QAAS;AAAA,EACjD;AAEA,cAAY,MAAM;AAClB,cAAY,MAAM;AAElB,SAAO,CAAC,QAAQ,MAAM;AAC1B;AAEA,SAAS,sBAAsB,MAAY,KAAY;AACnD,QAAM,gBAAgB,QAAQ,IAAI,KAAK,SAAS,KAAK;AACrD,QAAM,gBAAgB,QAAQ,IAAI,KAAK,SAAS,KAAK;AAErD,MAAI,UAAU,MAAM,aAAa;AACjC,MAAI,aAAa,MAAM,aAAa;AACxC;AAEA,SAAS,sBAAsB,MAAkB;AAC7C,MAAI,KAAK,oCAAoC,GAAG;AAC5C;AAAA,EACJ;AAEA,OAAK,kCACD,WAAY,KAAK,KAAK;AAC1B,OAAK;AACL,OAAK,iBAAiB,IAAI,YAAY,MAAO;AACjD;AAEA,SAAS,uBAAuB,MAAY,KAAkB;AAC1D,MAAI,KAAK,oCAAoC,GAAG;AAC5C;AAAA,EACJ;AAEA,OAAK,gBAAgB,QAAQ,IAAI,KAAK,SAAS,KAAK;AACpD,OAAK,SAAS,KAAK;AACvB;AAEO,SAAS,sBAA+B;AAC3C,QAAM,cAAuB,CAAC;AAE9B,WAAS,IAAI,GAAG,IAAI,UAAW,KAAK;AAChC,gBAAY,KAAK,CAAU;AAAA,EAC/B;AAEA,SAAO,QAAQ,WAAW;AAC9B;AAEA,SAAS,QAAW,OAAiB;AACjC,MAAI,eAAe,MAAM;AAGzB,SAAO,gBAAgB,GAAG;AAEtB,QAAI,cAAc,KAAK,MAAM,KAAK,OAAO,IAAI,YAAY;AACzD;AAGC,KAAC,MAAM,YAAY,GAAG,MAAM,WAAW,CAAC,IAAI;AAAA,MACzC,MAAM,WAAW;AAAA,MACjB,MAAM,YAAY;AAAA,IACtB;AAAA,EACJ;AAEA,SAAO;AACX;;;ACnMA,iBAA4B;AAE5B,IAAM,aAAa;AAEnB,SAAS,WAAW,KAA+B;AAC/C,MAAI,CAAC,KAAK;AACN,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AACJ;AAEA,SAAS,KAAK,GAAS,UAAkB;AACrC,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAC/B,gBAAY,GAAG,CAAC;AAAA,EACpB;AACJ;AAEA,SAAS,kBAAkB;AACvB,QAAM,IAAI,WAAW;AACrB,MAAI,WAAkB,EAAE;AACxB,MAAI,aAAoB,EAAE;AAC1B,cAAY,GAAG,CAAC;AAEhB,aAAW,aAAa,GAAG,UAAU,CAAC;AACtC,aAAW,WAAW,GAAG,QAAQ,CAAC;AAGlC,WAAS,IAAI,GAAG,IAAI,OAAQ,KAAK;AAC7B,eAAW,EAAE;AACb,iBAAa,EAAE;AACf,gBAAY,GAAG,CAAC;AAEhB,eAAW,aAAa,GAAG,UAAU,CAAC;AACtC,eAAW,WAAW,GAAG,QAAQ,CAAC;AAAA,EACtC;AAEA,UAAQ,IAAI,sBAAsB;AACtC;AAEA,SAAS,gBAAgB;AACrB,QAAM,MAAM,IAAI,YAAY,MAAO;AAEnC,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,UAAM,CAAC,OAAO,GAAG,IAAI,OAAO,CAAU;AAEtC,UAAM,MAAM,IAAI,KAAK;AAErB,QAAI,QAAQ,QAAW;AACnB,cAAQ,IAAI,uBAAuB,GAAG;AACtC;AAAA,IACJ;AAEA,eAAW,EAAE,MAAM,IAAI;AACvB,QAAI,KAAK,KAAK;AAAA,EAClB;AACA,UAAQ,IAAI,GAAG;AACf,UAAQ,IAAI,oBAAoB;AACpC;AAEA,eAAe,sBAAsB;AACjC,iBAAe,YAAY,KAAU;AACjC,QAAI,CAAC,KAAK;AACN,YAAM,SAAS,MAAiB,gBAAK,YAAY,GAAG;AACpD,YAAM,SAAS,MAAiB,gBAAK,YAAY,GAAG;AACpD,YAAM,SAAS,MAAiB,gBAAK,YAAY,GAAG;AAEpD,eAAS,OAAO,EAAE,kBAAkB;AAChC,cAAM,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI;AAAA,MAC5C;AAEA,eAAS,OAAO,EAAE,gBAAgB;AAC9B,cAAM,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI;AAAA,MAC5C;AAEA,eAAS,OAAO,QAAQ;AACpB,cAAM,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI;AAAA,MAC5C;AAEA,YAAM,OAAO,MAAM;AACnB,YAAM,OAAO,MAAM;AACnB,YAAM,OAAO,MAAM;AAEnB,YAAM,IAAI,MAAM,iBAAiB;AAAA,IACrC;AAAA,EACJ;AAEA,UAAQ,IAAI,2BAA2B;AAEvC,QAAM,IAAI,WAAW;AACrB,QAAM,SAAS,oBAAI,IAAW;AAE9B,WAAS,IAAI,GAAG,IAAI,aAAa,GAAG,KAAK;AACrC,UAAM,YAAY,CAAC,OAAO,IAAI,EAAE,MAAM,CAAC;AACvC,UAAM,YAAY,CAAC,OAAO,IAAI,EAAE,MAAM,CAAC;AAEvC,WAAO,IAAI,EAAE,MAAM;AACnB,WAAO,IAAI,EAAE,MAAM;AAEnB,gBAAY,GAAG,CAAC;AAAA,EAEpB;AAEA,UAAQ,IAAI,yBAAyB;AACrC,UAAQ,IAAI,0BAA0B;AAC1C;AAEA,SAAS,2BAA2B;AAChC,QAAM,IAAI,WAAW;AACrB,MAAI,YAAoB,EAAE;AAC1B,MAAI,UAAkB,EAAE;AAExB,WAAS,YAAY,KAAU;AAC3B,QAAI,CAAC,KAAK;AACN,cAAQ,IAAI,CAAC;AACb,cAAQ,IAAI,aAAa,OAAO;AAChC,cAAQ,IAAI,eAAe,SAAS;AAEpC,iBAAW,GAAG;AAAA,IAClB;AAAA,EACJ;AAEA,WAAS,aAAa;AAClB,gBAAY,EAAE,qBAAqB,OAAO;AAC1C,gBAAY,EAAE,oCAAoC,SAAS;AAAA,EAC/D;AAEA,WAAS,gBAAgB;AACrB,gBAAY,aAAa,KAAK;AAC9B;AAAA,EACJ;AAEA,SAAO,cAAc,GAAG;AACpB,SAAK,GAAG,aAAa,KAAK,UAAU,CAAC;AACrC,gBAAY,EAAE,qBAAqB,OAAO;AAC1C,gBAAY,GAAG,CAAC;AAChB,kBAAc;AACd,eAAW;AAAA,EACf;AAEA,cAAY,CAAC,EAAE,aAAa;AAE5B,QAAM,KAAK,EAAE;AAEb,cAAY,GAAG,CAAC;AAChB,cAAY,EAAE,iBAAiB,EAAE,kBAAkB,CAAC;AACpD,cAAY,EAAE,kBAAkB,EAAE;AAClC,UAAQ,IAAI,+BAA+B;AAC/C;AAiBA,eAAsB,YAAY;AAC9B,kBAAgB;AAChB,gBAAc;AACd,QAAM,oBAAoB;AAC1B,2BAAyB;AAE7B;;;ACjLA,UAAU;",
  "names": ["color", "color1", "color2"]
}
