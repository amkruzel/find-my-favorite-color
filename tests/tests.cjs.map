{
  "version": 3,
  "sources": ["../scripts/condensedColors.ts", "../scripts/colors.ts", "../scripts/game.ts", "../scripts/user.ts", "../scripts/db.ts", "colors.test.ts", "condensedColors.test.ts", "game.test.ts", "db.test.ts", "tests.ts"],
  "sourcesContent": ["import type { color } from './game'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error('Value is undefined but should not be')\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n", "import { color, colorsAry } from './game'\nimport { CondensedColors } from './condensedColors'\n\nconst MAX_COLORS = 0x1000000\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    private static bgKey: number\n\n    constructor() {\n        this.init()\n    }\n\n    get color1(): color {\n        const c = this.ary[this.ary.length - 1]\n\n        if (c === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        return c\n    }\n\n    get color2(): color {\n        const c = this.ary[this.ary.length - 2]\n\n        if (c === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this.ary.slice(0, 1001))\n    }\n\n    shuffle(): void {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        if (c1 === undefined || c2 === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     *\n     * @param num Updates ary, ensuring that there are always >= 2 elements\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        this.selectedColors.push(selectedColor)\n\n        // if there were more than two colors left before making a selection\n        if (this.ary.length > 2) {\n            this.pop2()\n        } else {\n            // else, those were the last two colors and we need to reset\n            if (this.ary.length !== 2) {\n                throw new Error('Array is the incorrect length')\n            }\n\n            const favoriteColorFound = this.selectedColors.length === 1\n\n            if (favoriteColorFound) {\n                this.selectedColors.push(this.selectedColors[0]!)\n            }\n\n            this.reset(shuffle(this.selectedColors))\n            this.selectedColors = []\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    static load(data: ColorsLoadData): Colors {\n        const c = new Colors()\n        c.load(data)\n        return c\n    }\n\n    private reset(newAry: color[]): void {\n        assertColorsAry(newAry)\n        this.ary = newAry\n    }\n\n    private get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n\n    private pop2(): void {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    private load(data: ColorsLoadData) {\n        // first 1000\n        const tmp = Array.from(new Uint32Array(data.next1000))\n        assertColorsAry(tmp)\n        this.ary = tmp\n\n        // background\n        this.loadBg({ eliminated: data.eliminated, selected: data.selected })\n    }\n\n    private loadBg(data: { eliminated: ArrayBuffer; selected: ArrayBuffer }) {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/loadColors.js')\n        worker.postMessage([this.ary, data, this.reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n            if (oldKey !== Colors.bgKey) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        })\n    }\n\n    private init() {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n        this.first1000()\n        this.background()\n    }\n\n    private first1000(): void {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n\n        assertColorsAry(this.ary)\n    }\n\n    protected background(): void {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/initColors.js')\n        worker.postMessage([this.ary, this.reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [colors, oldKey] = msg.data\n            if (oldKey !== Colors.bgKey) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n        })\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData } from './colors'\n\nexport const MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    private _bgJobInstant: number = 0\n\n    constructor(\n        eliminated?: ArrayBuffer,\n        selected?: ArrayBuffer,\n        colors?: ArrayBuffer,\n        props?: GameProps\n    ) {\n        if (!eliminated || !selected || !colors || !props) {\n            this._init()\n        } else {\n            this._load(eliminated, selected, colors, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    private get _reloadBgKey(): number {\n        this._bgJobInstant = Date.now()\n        return this._getBgKey\n    }\n\n    private get _getBgKey(): number {\n        return this._bgJobInstant\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(\n        eliminated: ArrayBuffer,\n        selected: ArrayBuffer,\n        colors: ArrayBuffer,\n        props: GameProps\n    ) {\n        this.eliminatedColors = new CondensedColors(eliminated)\n        this.selectedColors = new CondensedColors(selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: colors,\n            eliminated,\n            selected,\n        }\n\n        this._loadColors(data)\n    }\n\n    private _loadColors(data: ColorsLoadData) {\n        this._colors = Colors.load(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors() {\n        this._colors = new Colors()\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\ninterface AppWithUser {\n    user: User\n    game: Game\n}\n\nfunction assertUser(app: App): asserts app is AppWithUser {\n    if (!app.user) {\n        return\n    }\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    async save(app: App): Promise<boolean> {\n        if (app.user.id === 'guest') {\n            return false\n        }\n\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n        assertUser(app)\n\n        const game = await this._getGameIfOneExists(app.user.id)\n        console.log(game)\n\n        const rv = await this._createOrUpdate(app, game?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(app: App) {\n        if (app.user.id === 'guest') {\n            return\n        }\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        if (!game) {\n            return\n        }\n\n        const [eliminatedColors, selectedColors, colors] = await this._getFiles(\n            game\n        )\n\n        if (!eliminatedColors || !selectedColors || !colors) {\n            return\n        }\n\n        app.game = new Game(\n            eliminatedColors,\n            selectedColors,\n            colors,\n            game.properties\n        )\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(\n        app: AppWithUser,\n        gameId?: string\n    ): Promise<boolean> {\n        const form = this._buildForm(app)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n        return true\n    }\n\n    private _buildForm(app: AppWithUser): FormData {\n        const elimColorBlob = app.game.eliminatedColors.blob\n        const selectColorBlob = app.game.selectedColors.blob\n        const colorsBlob = new Blob([app.game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(app.game.properties))\n        form.set('user', app.user.id)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: game.properties,\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n                colors: game.colors,\n            }\n        } catch (error) {\n            console.log(error)\n\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "import { Colors } from 'scripts/colors'\nimport { MAX_COLORS, color, colorsAry, shuffle } from 'scripts/game'\n\nexport class TestColors extends Colors {\n    constructor() {\n        super()\n    }\n\n    get raw() {\n        return this.ary\n    }\n\n    get nextIter(): color[] {\n        return this.selectedColors\n    }\n\n    protected background() {\n        const tmpClr = this.ary\n        let newColors: number[] = []\n        for (let i = 0; i < MAX_COLORS; i++) {\n            if (tmpClr.includes(i as color)) {\n                continue\n            }\n            newColors.push(i)\n        }\n\n        newColors = shuffle(newColors)\n\n        const HUNDRED_THOU = 100000\n        for (let i = 0; i < 170; i++) {\n            const min = i * HUNDRED_THOU\n            const max = min + HUNDRED_THOU\n\n            if (min >= MAX_COLORS) {\n                break\n            }\n\n            const subset = newColors.slice(min, max)\n\n            this.ary.splice(0, 0, ...(subset as colorsAry))\n        }\n    }\n}\n", "import { CondensedColors } from 'scripts/condensedColors'\n\nexport class TestCondensedColors extends CondensedColors {\n    get raw(): Uint32Array {\n        return this.ary\n    }\n}\n", "import { Game, color } from 'scripts/game'\n\n//import * as fs from 'fs'\nimport * as fsPromises from 'fs/promises'\nimport { TestColors } from './colors.test'\nimport { TestCondensedColors } from './condensedColors.test'\n\nconst MAX_COLORS = 0x1000000\n\nexport class TestGame extends Game {\n    _colors: TestColors\n    selectedColors: TestCondensedColors\n    eliminatedColors: TestCondensedColors\n\n    constructor() {\n        super()\n    }\n\n    get testingProps(): [color[], color[]] {\n        return [this._colors.raw, this._colors.nextIter]\n    }\n\n    protected _buildColors() {\n        this._colors = new TestColors()\n        this.selectedColors = new TestCondensedColors()\n        this.eliminatedColors = new TestCondensedColors()\n    }\n}\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfunction loop(g: Game, numLoops: number) {\n    for (let i = 0; i < numLoops; i++) {\n        g.selectColor(1)\n    }\n}\n\nfunction _split(color: color) {\n    const [index, bit] = [color >> 5, 2 ** (color & 31)]\n    return [index, bit]\n}\n\nfunction testSelectColor() {\n    const g = new TestGame()\n    let selected: color = g.color1\n    let eliminated: color = g.color2\n    g.selectColor(1)\n\n    assertTrue(g.isEliminated(eliminated))\n    assertTrue(g.isSelected(selected))\n\n    // now do it a bunch more times\n    for (let i = 0; i < 0xffff; i++) {\n        selected = g.color1\n        eliminated = g.color2\n        g.selectColor(1)\n        //console.log(i)\n        assertTrue(g.isEliminated(eliminated))\n        assertTrue(g.isSelected(selected))\n    }\n\n    console.log('testSelectColor PASS')\n}\n\nfunction testUintArray() {\n    const ary = new Uint32Array(0x80000)\n\n    for (let i = 0; i < MAX_COLORS; i++) {\n        const [index, bit] = _split(i as color)\n\n        const num = ary[index!]\n\n        if (num === undefined) {\n            console.log('num is not truthy: ', num)\n            continue\n        }\n\n        assertTrue(!(num & bit!))\n        ary[index!] |= bit!\n    }\n    console.log('testUintArray PASS')\n}\n\nasync function testColorUniqueness() {\n    async function _assertTrue(val: any) {\n        if (!val) {\n            const elimFh = await fsPromises.open('elim.txt', 'w')\n            const seleFh = await fsPromises.open('sele.txt', 'w')\n            const coloFh = await fsPromises.open('colo.txt', 'w')\n\n            for (let num of g.eliminatedColors.raw) {\n                await elimFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of g.selectedColors.raw) {\n                await seleFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of colors) {\n                await coloFh.write(num.toString() + '\\n')\n            }\n\n            await elimFh.close()\n            await seleFh.close()\n            await coloFh.close()\n\n            throw new Error('val is not true')\n        }\n    }\n\n    const g = new TestGame()\n    const colors = new Set<color>()\n\n    for (let i = 0; i < MAX_COLORS / 2; i++) {\n        await _assertTrue(!colors.has(g.color1))\n        await _assertTrue(!colors.has(g.color2))\n\n        colors.add(g.color1)\n        colors.add(g.color2)\n\n        g.selectColor(1)\n    }\n\n    console.log('testColorUniqueness PASS')\n}\n\nfunction testCheckForNewIteration() {\n    const g = new TestGame()\n    let curColors: number = g.colorsRemainingCurrentIteration\n    let curIter: number = g.currentIteration\n\n    function _assertTrue(val: any) {\n        if (!val) {\n            console.log(g)\n            console.log('curIter: ', curIter)\n            console.log('curColors: ', curColors)\n\n            assertTrue(val)\n        }\n    }\n\n    function assertVals() {\n        _assertTrue(g.currentIteration === curIter)\n        _assertTrue(g.colorsRemainingCurrentIteration === curColors)\n    }\n\n    function incrementVals() {\n        curColors = MAX_COLORS / 2 ** curIter\n        curIter++\n    }\n\n    while (curColors !== 2) {\n        loop(g, MAX_COLORS / 2 ** curIter - 1)\n        _assertTrue(g.currentIteration === curIter)\n        g.selectColor(1)\n        incrementVals()\n        assertVals()\n    }\n\n    _assertTrue(!g.favoriteColor)\n\n    const c1 = g.color1\n    const c2 = g.color2\n    console.log(c1, c2)\n\n    g.selectColor(2)\n    _assertTrue(g.favoriteColor || g.favoriteColor === 0)\n    _assertTrue(g.favoriteColor === c2)\n    console.log('testCheckForNewIteration PASS')\n}\n\nexport async function gameTests() {\n    testSelectColor()\n    testUintArray()\n    await testColorUniqueness()\n    testCheckForNewIteration()\n}\n", "import { Db } from 'scripts/db'\nimport { Game } from 'scripts/game'\nimport { App } from 'scripts/app'\nimport { getUser, guestUser } from 'scripts/user'\nimport { CondensedColors } from 'scripts/condensedColors'\nimport { TestGame } from './game.test'\n\nconst app: App = {\n    game: new TestGame(),\n    user: guestUser(),\n}\n\nconst db = new Db('http', '34.42.14.226', '8090')\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfor (let i = 0; i < 0xfffff; i++) {\n    app.game.selectColor(1)\n}\n\nasync function testSaveGame() {\n    await db.save(app)\n}\n\nasync function testGetGame() {\n    //await db.getGame(app.user!.id)\n}\n\nasync function testSaveAndLoad() {\n    const g = app.game as TestGame\n    const eliminated = g.eliminatedColors\n    const selected = g.selectedColors\n    const [colors, nextIterationColors] = g.testingProps\n\n    await db.save(app)\n    await db.load(app)\n\n    for (let i = 0; i < 0x80000; i++) {\n        console.log(i, eliminated.raw[0])\n\n        assertTrue(eliminated.raw[i] === g.eliminatedColors.raw[i])\n        assertTrue(selected.raw[i] === g.selectedColors.raw[i])\n    }\n\n    const [newColors, newNextIterationColors] = g.testingProps\n\n    let i = 0,\n        n = 0\n    console.log('testing colors')\n\n    for (const color of colors) {\n        assertTrue(newColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    ;(i = 0), (n = 0)\n    console.log('testing nextIterationColors')\n\n    for (const color of nextIterationColors) {\n        assertTrue(newNextIterationColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    console.log('all are equal')\n}\n\nexport async function testDb() {\n    //await testSaveGame()\n    //await testGetGame()\n    await testSaveAndLoad()\n}\n", "import { testDb } from './db.test'\nimport { gameTests } from './game.test'\nimport { testPerformance } from './performance.test'\n//testPerformance()\n//gameTests()\ntestDb()\n\n// 4753427\n"],
  "mappings": "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",
  "names": ["color", "MAX_COLORS", "shuffle", "color", "app", "MAX_COLORS", "shuffle", "i", "color"]
}
