{
  "version": 3,
  "sources": ["../scripts/game.ts", "../scripts/user.ts", "../scripts/db.ts", "db.test.ts", "tests.ts"],
  "sourcesContent": ["const MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\ntype colorsAry = [color, color, ...color[]]\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error('Not a color!')\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: Uint32Array\n    selectedColors: Uint32Array\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    private _colors: colorsAry\n    private _nextIterationColors: color[]\n\n    constructor(\n        eliminated?: ArrayBuffer,\n        selected?: ArrayBuffer,\n        props?: GameProps\n    ) {\n        if (!eliminated || !selected || !props) {\n            this._init()\n            return\n        }\n\n        this._load(eliminated, selected, props)\n    }\n\n    get color1() {\n        return this._colors[this._colors.length - 1] as color\n    }\n\n    get color2() {\n        return this._colors[this._colors.length - 2] as color\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get testingProps(): [color[], color[]] {\n        return [this._colors, this._nextIterationColors]\n    }\n\n    selectColor(num: 1 | 2) {\n        this._updateSelectedColors(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        shuffle(this._colors)\n    }\n\n    isEliminated(color: color) {\n        return this._is(color, 'eliminated')\n    }\n\n    isSelected(color: color) {\n        return this._is(color, 'selected')\n    }\n\n    private _init() {\n        let p = performance.now()\n        console.log(`begin _init()`)\n\n        const initColors = (): void => {\n            this._colors = [0, 1] as [color, color]\n            p = performance.now()\n            for (let i = 2; i < 0x1000000; i++) {\n                this._colors.push(i as color)\n            }\n            console.log(`loop took ${performance.now() - p}ms`)\n            p = performance.now()\n            shuffle(this._colors)\n            console.log(`shuffle took ${performance.now() - p}ms`)\n        }\n\n        this.eliminatedColors = new Uint32Array(0x80000)\n        this.selectedColors = new Uint32Array(0x80000)\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n        this._nextIterationColors = []\n        console.log(`_init() took ${performance.now() - p}ms`)\n\n        console.log(`begin initColors()`)\n\n        p = performance.now()\n        initColors()\n        console.log(`initColors() took ${performance.now() - p}ms`)\n    }\n\n    private _load(\n        eliminated: ArrayBuffer,\n        selected: ArrayBuffer,\n        props: GameProps\n    ) {\n        this.eliminatedColors = new Uint32Array(eliminated)\n        this.selectedColors = new Uint32Array(selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n        this._buildColors()\n    }\n\n    private _buildColors() {\n        const colors = []\n        const nextIterationColors = []\n\n        for (let i = 0; i < MAX_COLORS; i++) {\n            assertColor(i)\n\n            if (this.isEliminated(i)) {\n                continue\n            }\n\n            if (this.isSelected(i)) {\n                nextIterationColors.push(i)\n                continue\n            }\n\n            colors.push(i)\n        }\n\n        this._colors = shuffle(colors) as colorsAry\n        this._nextIterationColors = nextIterationColors\n    }\n\n    private _updateSelectedColors(num: 1 | 2): void {\n        const _do = (action: 'select' | 'eliminate', color: color): void => {\n            const [index, bit] = this._split(color)\n            const array =\n                action === 'select' ? 'selectedColors' : 'eliminatedColors'\n\n            assertColor(color)\n            if (action === 'select') {\n                this._nextIterationColors.push(this._colors.pop()!)\n            } else {\n                this._colors.pop()\n            }\n            this[array][index] |= bit\n        }\n\n        const selectAndEliminateColors = (select: color, elim: color): void => {\n            _do('select', select)\n            _do('eliminate', elim)\n        }\n\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        selectAndEliminateColors(selectedColor, rejectedColor)\n    }\n\n    private _split(color: color): [index, bit] {\n        const [index, bit] = [color >> 5, 2 ** (color & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors = new Uint32Array(0x80000)\n\n        if (this._nextIterationColors.length < 1) {\n            throw new Error('Array is empty but should not be')\n        }\n\n        this._colors = shuffle(this._nextIterationColors) as colorsAry\n        this._nextIterationColors = []\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n\n    private _is(color: color, testingFor: 'eliminated' | 'selected'): boolean {\n        const [index, bit] = this._split(color)\n\n        const num =\n            testingFor === 'eliminated'\n                ? this.eliminatedColors[index]\n                : this.selectedColors[index]\n\n        if (num === undefined) {\n            return false\n        }\n\n        return !!(num & bit)\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\ninterface AppWithUser {\n    user: User\n    game: Game\n}\n\nfunction assertUser(app: App): asserts app is AppWithUser {\n    if (!app.user) {\n        return\n    }\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    async save(app: App): Promise<boolean> {\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n\n        if (!app.user) {\n            return false\n        }\n\n        assertUser(app)\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        const rv = await this._createOrUpdate(app, game?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(app: App) {\n        if (app.user.id === 'guest') {\n            return\n        }\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        if (!game) {\n            return\n        }\n\n        const [eliminatedColors, selectedColors] = await this._getFiles(game)\n\n        if (!eliminatedColors || !selectedColors) {\n            return\n        }\n\n        app.game = new Game(eliminatedColors, selectedColors, game.properties)\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(\n        app: AppWithUser,\n        gameId?: string\n    ): Promise<boolean> {\n        const form = this._buildForm(app)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n\n        const json = await response.json()\n\n        console.log(json)\n\n        return true\n    }\n\n    private _buildForm(app: AppWithUser): FormData {\n        const elimColorBlob = new Blob([app.game.eliminatedColors])\n        const selectColorBlob = new Blob([app.game.selectedColors])\n\n        const form = new FormData()\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('properties', JSON.stringify(app.game.properties))\n        form.set('user', app.user.id)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: JSON.parse(game.properties),\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n            }\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "import { Db } from 'scripts/db'\nimport { Game } from 'scripts/game'\nimport { App } from 'scripts/app'\nimport { getUser, guestUser } from 'scripts/user'\n\nconst app: App = {\n    game: new Game(),\n    user: guestUser(),\n}\n\nconst db = new Db('http', '34.42.14.226', '8090')\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfor (let i = 0; i < 0xfffff; i++) {\n    app.game.selectColor(1)\n}\n\nasync function testSaveGame() {\n    await db.save(app)\n}\n\nasync function testGetGame() {\n    //await db.getGame(app.user!.id)\n}\n\nasync function testSaveAndLoad() {\n    const eliminated = app.game.eliminatedColors\n    const selected = app.game.selectedColors\n    const [colors, nextIterationColors] = app.game.testingProps\n\n    await db.save(app)\n    await db.load(app)\n\n    for (let i = 0; i < 0x80000; i++) {\n        assertTrue(eliminated[i] === app.game.eliminatedColors[i])\n        assertTrue(selected[i] === app.game.selectedColors[i])\n    }\n\n    const [newColors, newNextIterationColors] = app.game.testingProps\n\n    let i = 0,\n        n = 0\n    console.log('testing colors')\n\n    for (const color of colors) {\n        assertTrue(newColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    ;(i = 0), (n = 0)\n    console.log('testing nextIterationColors')\n\n    for (const color of nextIterationColors) {\n        assertTrue(newNextIterationColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    console.log('all are equal')\n}\n\nexport async function testDb() {\n    //await testSaveGame()\n    //await testGetGame()\n    await testSaveAndLoad()\n}\n", "import { testDb } from './db.test'\nimport { gameTests } from './game.test'\nimport { testPerformance } from './performance.test'\n//testPerformance()\n//gameTests()\ntestDb()\n\n// 4753427\n"],
  "mappings": "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",
  "names": ["app", "i"]
}
