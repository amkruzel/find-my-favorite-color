{
  "version": 3,
  "sources": ["../scripts/condensedColors.ts", "../scripts/colors.ts", "../scripts/game.ts", "game.test.ts", "tests.ts"],
  "sourcesContent": ["import type { color } from './game'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    private ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    get raw(): Uint32Array {\n        return this.ary\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error('Value is undefined but should not be')\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n", "import { color, colorsAry } from './game'\n\nconst MAX_COLORS = 0x1000000\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nfunction assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Colors {\n    private selectedColors: color[]\n    protected ary: colorsAry\n    private static bgKey: number\n\n    constructor() {\n        this.init()\n    }\n\n    get color1(): color {\n        const c = this.ary[this.ary.length - 1]\n\n        if (c === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        return c\n    }\n\n    get color2(): color {\n        const c = this.ary[this.ary.length - 2]\n\n        if (c === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this.ary.slice(0, 1001))\n    }\n\n    get raw(): colorsAry {\n        return this.ary\n    }\n\n    get nextIter(): color[] {\n        return this.selectedColors\n    }\n\n    shuffle(): void {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        if (c1 === undefined || c2 === undefined) {\n            throw new Error('Color is undefined!')\n        }\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     *\n     * @param num Updates ary, ensuring that there are always >= 2 elements\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color\n     * @return the colors in the format `[selected, rejected]`\n     */\n    selectColor(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        this.selectedColors.push(selectedColor)\n\n        // if there were only two colors left before making a selection\n        if (this.ary.length > 2) {\n            this.pop2()\n        } else {\n            // else, those were the last two colors and we need to reset\n            if (this.ary.length !== 2) {\n                throw new Error('Array is the incorrect length')\n            }\n\n            const favoriteColorFound = this.selectedColors.length === 1\n\n            if (favoriteColorFound) {\n                this.selectedColors.push(this.selectedColors[0]!)\n            }\n\n            this.reset(shuffle(this.selectedColors))\n            this.selectedColors = []\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private reset(newAry: color[]): void {\n        assertColorsAry(newAry)\n        this.ary = newAry\n    }\n\n    private get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n\n    private pop2(): void {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    private init() {\n        this.ary = new Array() as colorsAry\n        this.selectedColors = []\n        this.first1000()\n        this.background()\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n\n        assertColorsAry(this.ary)\n    }\n\n    protected background() {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/initColors.js')\n        worker.postMessage([this.ary, this.reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [colors, oldKey] = msg.data\n            if (oldKey !== Colors.bgKey) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n        })\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors } from './colors'\n\nconst MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nfunction assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    private _bgJobInstant: number = 0\n\n    constructor(\n        eliminated?: ArrayBuffer,\n        selected?: ArrayBuffer,\n        colors?: ArrayBuffer,\n        props?: GameProps\n    ) {\n        if (!eliminated || !selected || !colors || !props) {\n            this._init()\n        } else {\n            this._load(eliminated, selected, colors, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get testingProps(): [color[], color[]] {\n        return [this._colors.raw, this._colors.nextIter]\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    private get _reloadBgKey(): number {\n        this._bgJobInstant = Date.now()\n        return this._getBgKey\n    }\n\n    private get _getBgKey(): number {\n        return this._bgJobInstant\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    private _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(\n        eliminated: ArrayBuffer,\n        selected: ArrayBuffer,\n        colors: ArrayBuffer,\n        props: GameProps\n    ) {\n        this.eliminatedColors = new CondensedColors(eliminated)\n        this.selectedColors = new CondensedColors(selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const tempColors = Array.from(new Uint32Array(colors))\n        assertColorsAry(tempColors)\n        //this._colors = tempColors\n\n        this._loadColors()\n    }\n\n    private _loadColors() {\n        console.log('_loadColorsBg')\n        const worker = new Worker('workers/loadColors.js')\n        const data = {\n            colors: this._colors,\n            eliminatedColors: this.eliminatedColors,\n            selectedColors: this.selectedColors,\n        }\n        worker.postMessage([data, this._reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [[colors, nextIterationColors], oldKey] = msg.data\n\n            if (oldKey !== this._getBgKey) {\n                return\n            }\n\n            assertColorsAry(colors)\n            assertColorsAry(nextIterationColors)\n\n            //colors.push(...this._colors)\n            //this._colors = colors\n\n            //nextIterationColors.push(...this._nextIterationColors)\n            //this._nextIterationColors = nextIterationColors\n        })\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors() {\n        this._colors = new Colors()\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.selectColor(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "import { Game, color, colorsAry } from 'scripts/game'\nimport { Colors } from 'scripts/colors'\n\n//import * as fs from 'fs'\nimport * as fsPromises from 'fs/promises'\n\nconst MAX_COLORS = 0x1000000\n\nclass TestColors extends Colors {\n    constructor() {\n        super()\n    }\n\n    protected background() {\n        const tmpClr = this.ary\n        let newColors: number[] = []\n        for (let i = 0; i < MAX_COLORS; i++) {\n            if (tmpClr.includes(i as color)) {\n                continue\n            }\n            newColors.push(i)\n        }\n\n        newColors = shuffle(newColors)\n\n        const HUNDRED_THOU = 100000\n        for (let i = 0; i < 170; i++) {\n            const min = i * HUNDRED_THOU\n            const max = min + HUNDRED_THOU\n\n            if (min >= MAX_COLORS) {\n                break\n            }\n\n            const subset = newColors.slice(min, max)\n\n            this.ary.splice(0, 0, ...(subset as colorsAry))\n        }\n    }\n}\n\nclass TestGame extends Game {\n    constructor() {\n        super()\n    }\n\n    protected _buildColors() {\n        this._colors = new TestColors()\n    }\n}\n\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfunction loop(g: Game, numLoops: number) {\n    for (let i = 0; i < numLoops; i++) {\n        g.selectColor(1)\n    }\n}\n\nfunction _split(color: color) {\n    const [index, bit] = [color >> 5, 2 ** (color & 31)]\n    return [index, bit]\n}\n\nfunction testSelectColor() {\n    const g = new TestGame()\n    let selected: color = g.color1\n    let eliminated: color = g.color2\n    g.selectColor(1)\n\n    assertTrue(g.isEliminated(eliminated))\n    assertTrue(g.isSelected(selected))\n\n    // now do it a bunch more times\n    for (let i = 0; i < 0xffff; i++) {\n        selected = g.color1\n        eliminated = g.color2\n        g.selectColor(1)\n        //console.log(i)\n        assertTrue(g.isEliminated(eliminated))\n        assertTrue(g.isSelected(selected))\n    }\n\n    console.log('testSelectColor PASS')\n}\n\nfunction testUintArray() {\n    const ary = new Uint32Array(0x80000)\n\n    for (let i = 0; i < MAX_COLORS; i++) {\n        const [index, bit] = _split(i as color)\n\n        const num = ary[index!]\n\n        if (num === undefined) {\n            console.log('num is not truthy: ', num)\n            continue\n        }\n\n        assertTrue(!(num & bit!))\n        ary[index!] |= bit!\n    }\n    console.log('testUintArray PASS')\n}\n\nasync function testColorUniqueness() {\n    async function _assertTrue(val: any) {\n        if (!val) {\n            const elimFh = await fsPromises.open('elim.txt', 'w')\n            const seleFh = await fsPromises.open('sele.txt', 'w')\n            const coloFh = await fsPromises.open('colo.txt', 'w')\n\n            for (let num of g.eliminatedColors.raw) {\n                await elimFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of g.selectedColors.raw) {\n                await seleFh.write(num.toString() + '\\n')\n            }\n\n            for (let num of colors) {\n                await coloFh.write(num.toString() + '\\n')\n            }\n\n            await elimFh.close()\n            await seleFh.close()\n            await coloFh.close()\n\n            throw new Error('val is not true')\n        }\n    }\n\n    const g = new TestGame()\n    const colors = new Set<color>()\n\n    for (let i = 0; i < MAX_COLORS / 2; i++) {\n        await _assertTrue(!colors.has(g.color1))\n        await _assertTrue(!colors.has(g.color2))\n\n        colors.add(g.color1)\n        colors.add(g.color2)\n\n        g.selectColor(1)\n    }\n\n    console.log('testColorUniqueness PASS')\n}\n\nfunction testCheckForNewIteration() {\n    const g = new TestGame()\n    let curColors: number = g.colorsRemainingCurrentIteration\n    let curIter: number = g.currentIteration\n\n    function _assertTrue(val: any) {\n        if (!val) {\n            console.log(g)\n            console.log('curIter: ', curIter)\n            console.log('curColors: ', curColors)\n\n            assertTrue(val)\n        }\n    }\n\n    function assertVals() {\n        _assertTrue(g.currentIteration === curIter)\n        _assertTrue(g.colorsRemainingCurrentIteration === curColors)\n    }\n\n    function incrementVals() {\n        curColors = MAX_COLORS / 2 ** curIter\n        curIter++\n    }\n\n    while (curColors !== 2) {\n        loop(g, MAX_COLORS / 2 ** curIter - 1)\n        _assertTrue(g.currentIteration === curIter)\n        g.selectColor(1)\n        incrementVals()\n        assertVals()\n    }\n\n    _assertTrue(!g.favoriteColor)\n\n    const c1 = g.color1\n    const c2 = g.color2\n    console.log(c1, c2)\n\n    g.selectColor(2)\n    _assertTrue(g.favoriteColor || g.favoriteColor === 0)\n    _assertTrue(g.favoriteColor === c2)\n    console.log('testCheckForNewIteration PASS')\n}\n\nexport async function gameTests() {\n    testSelectColor()\n    testUintArray()\n    await testColorUniqueness()\n    testCheckForNewIteration()\n}\n", "import { testDb } from './db.test'\nimport { gameTests } from './game.test'\nimport { testPerformance } from './performance.test'\n//testPerformance()\ngameTests()\n//testDb()\n\n// 4753427\n"],
  "mappings": "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",
  "names": ["color", "MAX_COLORS", "assertColor", "assertColorsAry", "color", "MAX_COLORS", "assertColorsAry", "MAX_COLORS", "shuffle", "color"]
}
