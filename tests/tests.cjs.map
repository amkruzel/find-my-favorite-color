{
  "version": 3,
  "sources": ["tests.ts", "../scripts/condensedColors.ts", "../scripts/game.ts", "../scripts/utils/utils.ts", "../scripts/colors.ts", "colors.test.ts", "condensedColors.test.ts", "../scripts/formConverter.ts", "../scripts/user.ts", "../scripts/db.ts", "db.test.ts", "game.test.ts"],
  "sourcesContent": ["//import { testDb } from './db.test'\n//import { gameTests } from './game.test'\n//import { testPerformance } from './performance.test'\n//import { testColors } from './colors.test'\nimport { describe } from 'node:test'\nimport { colorTests } from './colors.test'\nimport { condensedColorTests } from './condensedColors.test'\nimport { dbTests } from './db.test'\nimport { gameTests } from './game.test'\n//testPerformance()\n//gameTests()\n\ndescribe('Classes', () => {\n    colorTests()\n    condensedColorTests()\n    gameTests()\n    dbTests()\n})\n\n// 4753427\n", "import type { color } from './colors'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error(\n                `Value is undefined but should not be - val: '${val}'`\n            )\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals, 0, 0x80000)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData, color } from './colors'\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nexport interface GameLoadArys {\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n    colors: ArrayBuffer\n}\n\nexport class Game {\n    static MAX_COLORS = 0x1000000\n\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    id?: string\n\n    constructor(arys?: GameLoadArys, props?: GameProps) {\n        if (!arys || !props) {\n            this._init()\n        } else {\n            this._load(arys, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor() {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = Game.MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(arys: GameLoadArys, props: GameProps) {\n        this.eliminatedColors = new CondensedColors(arys.eliminated)\n        this.selectedColors = new CondensedColors(arys.selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: arys.colors,\n            eliminated: arys.eliminated,\n            selected: arys.selected,\n        }\n\n        this._buildColors(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors(data?: ColorsLoadData) {\n        this._colors = new Colors(data)\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            Game.MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import { Game } from './game'\nimport { shuffle } from './utils/utils'\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    protected favoriteColorFound: boolean\n    private static bgKey: number\n\n    constructor(data?: ColorsLoadData) {\n        this.init(data)\n    }\n\n    private init(data?: ColorsLoadData) {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n        this.favoriteColorFound = false\n\n        if (data) {\n            this.ary = ColorsAry.from(data.next1000)\n        } else {\n            this.first1000()\n        }\n\n        this.bg(data)\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * Game.MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        const worker = new Worker('workers/colors.js')\n        worker.postMessage([[this.ary, data], this.reloadBgKey])\n\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors?.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    protected isInvalid(key: any) {\n        return typeof key !== 'number' || key !== Colors.bgKey\n    }\n\n    get color1(): color {\n        return this.getAndValidate(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidate(2)\n    }\n\n    private getAndValidate(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        if (c === undefined) {\n            console.log(this.ary)\n        }\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return Uint32Array.from(this.ary.slice(-1000, this.ary.length))\n    }\n\n    shuffle() {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     * Updates ary, ensuring that there are always >= 2 elements.\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color.\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        if (this.favoriteColorFound) {\n            return [selectedColor, rejectedColor]\n        }\n\n        this.selectedColors.push(selectedColor)\n\n        const moreThan2ColorsRemaining = this.ary.length > 2\n\n        if (moreThan2ColorsRemaining) {\n            this.pop2()\n        } else {\n            this.resetAry()\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private pop2() {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    protected resetAry() {\n        this.validateAry()\n\n        this.favoriteColorFound = this.selectedColors.length === 1\n\n        if (this.favoriteColorFound) {\n            this.selectedColors.push(this.selectedColors[0]!) // must be defined because we just pushed a value\n        }\n\n        this.reset()\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    /**\n     * Shuffles `this.selectedColors`, asserts that is is a `colorsAry`,\n     * sets `this.ary = <the shuffled ary>`, and clears `this.selectedColors`\n     */\n    private reset() {\n        const newAry = shuffle(this.selectedColors)\n        assertColorsAry(newAry)\n        this.ary = newAry\n        this.selectedColors = []\n    }\n\n    protected get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n}\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n", "import {\n    Colors,\n    ColorsLoadData,\n    assertColor,\n    assertColorsAry,\n} from 'scripts/colors'\nimport { color } from 'scripts/colors'\nimport { Game } from 'scripts/game'\nimport { shuffle } from 'scripts/utils/utils'\n\nimport { describe, it } from 'node:test'\nimport assert from 'node:assert'\nimport { TestCondensedColors } from './condensedColors.test'\n\nexport class TestColors extends Colors {\n    isBgWorkDone: boolean\n\n    constructor(data?: ColorsLoadData) {\n        super(data)\n    }\n\n    get raw() {\n        return this.ary\n    }\n\n    get nextIter(): color[] {\n        return this.selectedColors\n    }\n\n    get faveColorFound() {\n        return this.favoriteColorFound\n    }\n\n    protected override bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        if (!data) {\n            this.bgNew()\n        } else {\n            this.bgLoad(data)\n        }\n\n        this.isBgWorkDone = true\n    }\n\n    private bgNew() {\n        const tmp = []\n        for (let i = 0; i < Game.MAX_COLORS; i++) {\n            tmp.push(i)\n        }\n        const tmp2 = shuffle(tmp)\n        assertColorsAry(tmp2)\n        this.ary = tmp2\n    }\n\n    private bgLoad(data: { eliminated: ArrayBuffer; selected: ArrayBuffer }) {\n        const eliminated = new TestCondensedColors(data.eliminated)\n        const selected = new TestCondensedColors(data.selected)\n\n        // go through all numbers\n        // - if a number is included in colors, skip it\n        // - if a number is included in eliminatedColors, skip it\n        // - if a color is included in selectedColors, add it to nextIterColors\n        const newColors = []\n\n        for (let color = 0; color < Game.MAX_COLORS; color++) {\n            assertColor(color)\n            const isEliminated = eliminated.has(color)\n            const isSelected = selected.has(color)\n            const alreadyIncluded = this.ary.includes(color)\n\n            if (isSelected) {\n                this.selectedColors.push(color)\n                continue\n            }\n\n            if (isEliminated || alreadyIncluded) {\n                continue\n            }\n\n            newColors.push(color)\n        }\n\n        shuffle(newColors)\n        shuffle(this.selectedColors)\n\n        assertColorsAry(newColors)\n\n        const HUNDRED_THOU = 100000\n        for (let i = 0; i < 170; i++) {\n            const min = i * HUNDRED_THOU\n            const max = min + HUNDRED_THOU\n\n            if (min >= Game.MAX_COLORS) {\n                break\n            }\n\n            const colorsSubset = newColors.slice(min, max)\n            this.ary.splice(0, 0, ...colorsSubset)\n        }\n    }\n}\n\nexport const colorTests = () => {\n    describe('Colors', () => {\n        const c = new TestColors()\n\n        it('should initialize', () => {\n            assert.equal(true, c.isBgWorkDone)\n        })\n\n        it('should get new colors after a selection', () => {\n            const [c1, c2] = [c.color1, c.color2]\n\n            c.select(1)\n\n            assert.notEqual(c1, c.color1)\n            assert.notEqual(c2, c.color2)\n        })\n\n        it('should correctly select colors', () => {\n            const numSelections = c.raw.length / 2\n\n            for (let i = 0; i < numSelections - 1; i++) {\n                c.select(1)\n            }\n\n            assert.equal(c.raw.length, 2)\n        })\n\n        it('should currectly shuffle when there are only two colors', () => {\n            const [c1, c2] = [c.color1, c.color2].sort()\n\n            c.shuffle()\n\n            const [newC1, newC2] = [c.color1, c.color2].sort()\n\n            assert.equal(c1, newC1)\n            assert.equal(c2, newC2)\n        })\n\n        it('should rebuild the array once all colors have been selected', () => {\n            c.select(2)\n\n            assert.equal(c.raw.length, Game.MAX_COLORS / 2)\n        })\n\n        it('should correctly iterate through the entire game', () => {\n            while (!c.faveColorFound) {\n                c.select(1)\n            }\n        })\n\n        it('should correctly load colors', async () => {\n            const c2 = new TestColors()\n            const elim = new TestCondensedColors()\n            const select = new TestCondensedColors()\n\n            for (let i = 0; i < 100000; i++) {\n                elim.add(c2.color2)\n                select.add(c2.color1)\n                c2.select(1)\n            }\n\n            assert.equal(1000, c2.next1000Colors.length)\n\n            const next1000b = new Blob([c2.next1000Colors])\n            const next1000 = await next1000b.arrayBuffer()\n            const eliminated = await elim.blob.arrayBuffer()\n            const selected = await select.blob.arrayBuffer()\n\n            const newC = new TestColors({ next1000, eliminated, selected })\n\n            assert.equal(c2.color1, newC.color1)\n            assert.equal(c2.color2, newC.color2)\n        })\n    })\n}\n", "import assert from 'node:assert'\nimport { describe, it } from 'node:test'\nimport { assertColor } from 'scripts/colors'\nimport { CondensedColors } from 'scripts/condensedColors'\nimport { Game } from 'scripts/game'\n\nexport class TestCondensedColors extends CondensedColors {\n    constructor(vals?: ArrayBuffer) {\n        super(vals)\n    }\n\n    get raw(): Uint32Array {\n        return this.ary\n    }\n}\n\nexport const condensedColorTests = () => {\n    const c = new TestCondensedColors()\n\n    function randomInt() {\n        return ~~(Math.random() * Game.MAX_COLORS)\n    }\n\n    describe('CondensedColors', () => {\n        it('correctly inserts colors', () => {\n            for (let i = 0; i < 10; i++) {\n                const int = randomInt()\n\n                assertColor(int)\n\n                if (!c.has(int)) {\n                    c.add(int)\n                }\n\n                assert.equal(c.has(int), true)\n            }\n        })\n\n        it('returns a blob that can be converted back to CondensedColors', async () => {\n            const b = c.blob\n\n            const newC = new TestCondensedColors(await b.arrayBuffer())\n            const newB = newC.blob\n\n            // A) Convert files to ArrayBuffer:\n            const arrayBufferFileA = await b.arrayBuffer()\n            const arrayBufferFileB = await newB.arrayBuffer()\n\n            // Stop if the files are not the same size:\n            assert.equal(\n                arrayBufferFileA.byteLength,\n                arrayBufferFileB.byteLength\n            )\n\n            // B) Convert ArrayBuffer to Uint8Array for byte-size comparison:\n            const uint8ArrayA = new Uint8Array(arrayBufferFileA)\n            const uint8ArrayB = new Uint8Array(arrayBufferFileB)\n\n            for (let i = 0, len = uint8ArrayA.length; i < len; i++) {\n                assert.equal(uint8ArrayA[i], uint8ArrayB[i])\n            }\n        })\n\n        it('loads from ArrayBuffer correctly', async () => {\n            const x = await c.blob.arrayBuffer()\n\n            const newC = new TestCondensedColors(x)\n\n            for (let i = 0; i < Game.MAX_COLORS; i++) {\n                assertColor(i)\n                assert.equal(c.has(i), newC.has(i))\n            }\n        })\n    })\n}\n", "import { Game } from './game'\n\nexport class FormConverter {\n    static signup(fe: HTMLFormElement): FormData {\n        const form = new FormData(fe)\n\n        FormConverter.tryAddProp(form, 'password', 'passwordConfirm')\n\n        return form\n    }\n\n    static login(fe: HTMLFormElement): FormData {\n        const form = new FormData(fe)\n\n        FormConverter.tryAddProp(form, 'identity', 'email')\n\n        return form\n    }\n\n    static from(obj: Map<string, string>): FormData {\n        const form = new FormData()\n\n        for (const [key, val] of obj) {\n            form.append(key, val)\n        }\n\n        return form\n    }\n\n    static game(game: Game, userId: string): FormData {\n        const elimColorBlob = game.eliminatedColors.blob\n        const selectColorBlob = game.selectedColors.blob\n        const colorsBlob = new Blob([game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(game.properties))\n        form.set('user', userId)\n\n        return form\n    }\n\n    private static tryAddProp(\n        form: FormData,\n        nameToGet: string,\n        nameToAdd: string\n    ): void {\n        const prop = form.get(nameToGet)\n\n        if (!prop || !(typeof prop === 'string')) {\n            return\n        }\n\n        form.set(nameToAdd, prop)\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function userFrom(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return userFrom({\n        id: 'guest',\n    })\n}\n", "import { FormConverter } from './formConverter'\nimport { GameProps, Game } from './game'\nimport { User, userFrom } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nclass DbError extends Error {\n    constructor(message?: string, options?: ErrorOptions) {\n        super(message, options)\n        this.name = 'DbError'\n    }\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    /**\n     * required fields are:\n     * - email\n     * - password\n     * - passwordConfirm\n     */\n    async signup(f: FormData): Promise<User> {\n        return await this.try('signup', f)\n    }\n\n    /**\n     * required fields are:\n     * - identity\n     * - password\n     */\n    async login(f: FormData): Promise<User> {\n        return await this.try('login', f)\n    }\n\n    async getUser(id: string): Promise<User> {\n        const res = await this._getUser(`records/${id}`)\n\n        return await this._parseUserResponse(res)\n    }\n\n    private async try(\n        action: 'login' | 'signup' | 'changepw',\n        form: FormData\n    ): Promise<User> {\n        const data = {\n            method: 'post',\n            body: form,\n        } as const\n\n        switch (action) {\n            case 'login':\n                return await this.tryLogin(data)\n            case 'signup':\n                return await this.trySignup(data)\n            case 'changepw':\n                return await this.tryChangePw(data)\n            default:\n                throw new Error(`'action' was not an expected value`)\n        }\n    }\n\n    private async tryLogin(data: AuthData): Promise<User> {\n        try {\n            const response = await this._getUser('auth-with-password', data)\n            return await this._parseUserResponse(response, 'record')\n        } catch (err) {\n            throw new DbError(\n                'Unable to login; email or password is incorrect.',\n                { cause: err }\n            )\n        }\n    }\n\n    private async trySignup(data: AuthData): Promise<User> {\n        try {\n            const response = await this._getUser('records', data)\n            return await this._parseUserResponse(response)\n        } catch (err) {\n            throw new DbError('Unable to sign-up; user might already exist.', {\n                cause: err,\n            })\n        }\n    }\n\n    private async tryChangePw(data: AuthData): Promise<User> {\n        throw new Error(\"Method 'tryChangePw' is not implemented!\")\n    }\n\n    private async _getUser(path: string, data?: AuthData): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseUserResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User> {\n        const json = await response.json()\n\n        if (!response.ok) {\n            throw new Error(json?.message, {\n                cause: json,\n            })\n        }\n\n        return userFrom(propName ? json[propName] : json)\n    }\n\n    async save(game: Game, userId: string): Promise<void> {\n        if (this.cannotSaveNow(userId)) {\n            return\n        }\n\n        this._pendingSave = true\n\n        const prevGame = await this._getGameIfOneExists(userId)\n        await this._createOrUpdate(game, userId, prevGame?.id)\n\n        this._pendingSave = false\n    }\n\n    private cannotSaveNow(userId: string) {\n        return userId === 'guest' || this._pendingSave\n    }\n\n    async load(userId: string): Promise<Game> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return new Game()\n        }\n\n        const [eliminated, selected, colors] = await this._getFiles(game)\n\n        return new Game(\n            {\n                eliminated,\n                selected,\n                colors,\n            },\n            game.properties\n        )\n    }\n\n    async delete(userId: string): Promise<void> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return\n        }\n\n        await this._delete(game.id)\n    }\n\n    protected async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        const response = await fetch(\n            `${this.path.games}/records?filter=(user='${userId}')`\n        )\n\n        const json = await response.json()\n\n        if (json.totalItems === 0) {\n            return null\n        }\n\n        if (!response.ok) {\n            throw new DbError(json?.message, {\n                cause: { code: json?.code, data: json?.data },\n            })\n        }\n\n        if (json.totalItems !== 1) {\n            throw new DbError('User has more than one game saved.')\n        }\n\n        const game: GameData = json.items[0]\n\n        return {\n            id: game.id,\n            user: game.user,\n            properties: game.properties,\n            eliminatedColors: game.eliminatedColors,\n            selectedColors: game.selectedColors,\n            colors: game.colors,\n        } as const\n    }\n\n    private async _createOrUpdate(\n        game: Game,\n        userId: string,\n        gameId?: string\n    ): Promise<void> {\n        const form = FormConverter.game(game, userId)\n\n        if (gameId) {\n            await this._patch(form, gameId)\n        } else {\n            await this._post(form)\n        }\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _delete(id: string): Promise<Response> {\n        return fetch(`${this.path.games}/records/${id}`, { method: 'DELETE' })\n    }\n\n    protected async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer> {\n        const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n\n        if (!res.ok) {\n            throw new DbError(`File ${filename} was unable to be retrieved.`, {\n                cause: await res.json(),\n            })\n        }\n\n        return await res.arrayBuffer()\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n}\n", "import { Db } from 'scripts/db'\nimport { describe, it } from 'node:test'\nimport { FormConverter } from 'scripts/formConverter'\nimport assert from 'assert'\nimport { TestGame } from './game.test'\n\nclass TestDb extends Db {\n    override async load(userId: string): Promise<TestGame> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return new TestGame()\n        }\n\n        const [eliminated, selected, colors] = await this._getFiles(game)\n\n        return new TestGame(\n            {\n                eliminated,\n                selected,\n                colors,\n            },\n            game.properties\n        )\n    }\n}\n\nconst db = new TestDb('http', '34.42.14.226', '8090')\n\nexport const dbTests = () => {\n    describe('Db', () => {\n        let newUserId: string\n\n        describe('auth methods', () => {\n            const myUserId = 'bdnqbqys20625ct'\n\n            const testEmail = `asdf@${makeId(5)}.c`\n            const testPw = '12345678'\n\n            it('should create a user', async () => {\n                const i = new Map()\n\n                i.set('email', testEmail)\n                i.set('password', testPw)\n                i.set('passwordConfirm', testPw)\n\n                const f = FormConverter.from(i)\n\n                const u = await db.signup(f)\n                newUserId = u.id\n            })\n\n            it('should login in existing user', async () => {\n                const i = new Map()\n\n                i.set('identity', testEmail)\n                i.set('password', testPw)\n\n                const f = FormConverter.from(i)\n\n                await db.login(f)\n            })\n\n            it('should throw an error for invalid credentials', async () => {\n                const i = new Map()\n\n                i.set('identity', testEmail)\n                i.set('password', 'asdfasdfa')\n\n                const f = FormConverter.from(i)\n\n                try {\n                    await db.login(f)\n                    assert.fail('login should have thrown an error')\n                } catch (error) {\n                    assert.equal(\n                        error.message,\n                        'Unable to login; email or password is incorrect.'\n                    )\n                }\n            })\n\n            it('should get info about existing user without logging in', async () => {\n                const u = await db.getUser(myUserId)\n\n                assert.equal('kruzelm.alex@gmail.com', u.email)\n            })\n        })\n\n        describe('game methods', () => {\n            const g = new TestGame()\n\n            for (let i = 0; i < 50; i++) {\n                g.selectColor(2)\n            }\n\n            console.log(g.next1000Colors)\n\n            it('should save a new game without throwing errors', async () => {\n                await db.save(g, newUserId)\n            })\n\n            it('should load a game without throwing errors', async () => {\n                const gameData = await db.load(newUserId)\n\n                console.log(gameData.next1000Colors)\n\n                assert.equal(gameData.color1, g.color1)\n                assert.equal(gameData.color2, g.color2)\n            })\n\n            it('should delete a game without throwing errors', async () => {\n                await db.delete(newUserId)\n\n                const newG = await db.load(newUserId)\n                assert.equal(\n                    TestGame.MAX_COLORS,\n                    newG.colorsRemainingCurrentIteration\n                )\n            })\n        })\n    })\n}\n\n// https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\nfunction makeId(length: number) {\n    let result = ''\n    const characters =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    let counter = 0\n    while (counter < length) {\n        result += characters.charAt(\n            Math.floor(Math.random() * charactersLength)\n        )\n        counter += 1\n    }\n    return result\n}\n\n/**\nfor (let i = 0; i < 0xfffff; i++) {\n    app.game.selectColor(1)\n}\n\nasync function testSaveAndLoad() {\n    const g = app.game as TestGame\n    const eliminated = g.eliminatedColors\n    const selected = g.selectedColors\n    const [colors, nextIterationColors] = g.testingProps\n\n    //await db.save(app)\n    //await db.load(app)\n\n    for (let i = 0; i < 0x80000; i++) {\n        console.log(i, eliminated.raw[0])\n\n        assertTrue(eliminated.raw[i] === g.eliminatedColors.raw[i])\n        assertTrue(selected.raw[i] === g.selectedColors.raw[i])\n    }\n\n    const [newColors, newNextIterationColors] = g.testingProps\n\n    let i = 0,\n        n = 0\n    console.log('testing colors')\n\n    for (const color of colors) {\n        assertTrue(newColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    ;(i = 0), (n = 0)\n    console.log('testing nextIterationColors')\n\n    for (const color of nextIterationColors) {\n        assertTrue(newNextIterationColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    console.log('all are equal')\n}\n\nexport async function testDb() {\n    //await testSaveGame()\n    //await testGetGame()\n    //await testSaveAndLoad()\n}\n\n*/\n", "import { Game, GameLoadArys, GameProps } from 'scripts/game'\n\n//import * as fs from 'fs'\nimport * as fsPromises from 'fs/promises'\nimport { TestColors } from './colors.test'\nimport { TestCondensedColors } from './condensedColors.test'\nimport { ColorsLoadData, color } from 'scripts/colors'\nimport { describe, it } from 'node:test'\nimport assert from 'assert'\n\nexport class TestGame extends Game {\n    _colors: TestColors\n    selectedColors: TestCondensedColors\n    eliminatedColors: TestCondensedColors\n\n    constructor(arys?: any, props?: any) {\n        super(arys, props)\n    }\n\n    get testingProps(): [color[], color[]] {\n        return [this._colors.raw, this._colors.nextIter]\n    }\n\n    protected _buildColors(data: ColorsLoadData) {\n        this._colors = new TestColors(data)\n    }\n}\n\nfunction assertTrue(val: any): asserts val is true {\n    assert.equal(true, val)\n}\n\nfunction loop(g: Game, numLoops: number) {\n    for (let i = 0; i < numLoops; i++) {\n        g.selectColor(1)\n    }\n}\n\nasync function gameToLoadData(\n    game: TestGame\n): Promise<[GameLoadArys, GameProps]> {\n    return [await getAryBuffers(game), game.properties]\n}\n\nasync function getAryBuffers(game: TestGame): Promise<GameLoadArys> {\n    const colors = await new Blob([game.next1000Colors]).arrayBuffer()\n    const eliminated = await game.eliminatedColors.blob.arrayBuffer()\n    const selected = await game.selectedColors.blob.arrayBuffer()\n\n    return {\n        colors,\n        eliminated,\n        selected,\n    } as const\n}\n\nexport const gameTests = () => {\n    describe('Game', () => {\n        const g1 = new TestGame()\n\n        it('selects colors correctly', () => {\n            let selected: color = g1.color1\n            let eliminated: color = g1.color2\n            g1.selectColor(1)\n\n            assertTrue(g1.isEliminated(eliminated))\n            assertTrue(g1.isSelected(selected))\n\n            // now do it a bunch more times\n            for (let i = 0; i < 0xffff; i++) {\n                selected = g1.color1\n                eliminated = g1.color2\n                g1.selectColor(1)\n                //console.log(i)\n                assertTrue(g1.isEliminated(eliminated))\n                assertTrue(g1.isSelected(selected))\n            }\n        })\n\n        it('should always have unique colors', async () => {\n            async function _assertTrue(val: any) {\n                if (!val) {\n                    const elimFh = await fsPromises.open('elim.txt', 'w')\n                    const seleFh = await fsPromises.open('sele.txt', 'w')\n                    const coloFh = await fsPromises.open('colo.txt', 'w')\n\n                    for (let num of g.eliminatedColors.raw) {\n                        await elimFh.write(num.toString() + '\\n')\n                    }\n\n                    for (let num of g.selectedColors.raw) {\n                        await seleFh.write(num.toString() + '\\n')\n                    }\n\n                    for (let num of colors) {\n                        await coloFh.write(num.toString() + '\\n')\n                    }\n\n                    await elimFh.close()\n                    await seleFh.close()\n                    await coloFh.close()\n\n                    throw new Error('val is not true')\n                }\n            }\n\n            const g = new TestGame()\n            const colors = new Set<color>()\n\n            for (let i = 0; i < Game.MAX_COLORS / 2; i++) {\n                await _assertTrue(!colors.has(g.color1))\n                await _assertTrue(!colors.has(g.color2))\n\n                colors.add(g.color1)\n                colors.add(g.color2)\n\n                g.selectColor(1)\n            }\n        })\n\n        it('should correctly change iterations', () => {\n            const g = new TestGame()\n            let curColors: number = g.colorsRemainingCurrentIteration\n            let curIter: number = g.currentIteration\n\n            function _assertTrue(val: any) {\n                if (!val) {\n                    console.log(g)\n                    console.log('curIter: ', curIter)\n                    console.log('curColors: ', curColors)\n\n                    assertTrue(val)\n                }\n            }\n\n            function assertVals() {\n                _assertTrue(g.currentIteration === curIter)\n                _assertTrue(g.colorsRemainingCurrentIteration === curColors)\n            }\n\n            function incrementVals() {\n                curColors = Game.MAX_COLORS / 2 ** curIter\n                curIter++\n            }\n\n            while (curColors !== 2) {\n                loop(g, Game.MAX_COLORS / 2 ** curIter - 1)\n                _assertTrue(g.currentIteration === curIter)\n                g.selectColor(1)\n                incrementVals()\n                assertVals()\n            }\n\n            _assertTrue(!g.favoriteColor)\n\n            const c1 = g.color1\n            const c2 = g.color2\n            console.log(c1, c2)\n\n            g.selectColor(2)\n            _assertTrue(g.favoriteColor || g.favoriteColor === 0)\n            _assertTrue(g.favoriteColor === c2)\n        })\n\n        it('should correctly load a game', async () => {\n            const [arys, props] = await gameToLoadData(g1)\n\n            const newG = new TestGame(arys, props)\n\n            assert.equal(newG.color1, g1.color1)\n            assert.equal(newG.color2, g1.color2)\n        })\n    })\n}\n"],
  "mappings": "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",
  "names": ["import_node_test", "color", "color", "import_node_test", "import_node_assert", "assert", "color", "assert", "import_node_test", "import_assert", "import_node_test", "assert", "assert"]
}
