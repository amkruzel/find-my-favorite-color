{
  "version": 3,
  "sources": ["../scripts/condensedColors.ts", "../scripts/utils/utils.ts", "../scripts/colors.ts", "../scripts/game.ts", "../scripts/user.ts", "../scripts/db.ts", "../scripts/ui.ts", "../scripts/auth.ts", "../scripts/notification.ts", "../scripts/app.ts", "db.test.ts", "tests.ts"],
  "sourcesContent": ["import type { color } from './colors'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error('Value is undefined but should not be')\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n", "// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import { Game } from './game'\nimport { shuffle } from './utils/utils'\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    private static bgKey: number\n\n    constructor(data?: ColorsLoadData) {\n        this.init(data)\n    }\n\n    private init(data?: ColorsLoadData) {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n\n        if (data) {\n            this.load(data)\n        } else {\n            this.first1000()\n            this.background()\n        }\n    }\n\n    private load(data: ColorsLoadData) {\n        this.ary = ColorsAry.from(data.next1000)\n        this.loadBg({ eliminated: data.eliminated, selected: data.selected })\n    }\n\n    private loadBg(data: { eliminated: ArrayBuffer; selected: ArrayBuffer }) {\n        const worker = new Worker('workers/loadColors.js')\n        worker.postMessage([this.ary, data, this.reloadBgKey])\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    private isInvalid(key: any) {\n        return typeof key !== 'number' || key !== Colors.bgKey\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * Game.MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected background() {\n        const worker = new Worker('workers/initColors.js')\n        worker.postMessage([this.ary, this.reloadBgKey])\n        worker.onmessage = msg => {\n            const [colors, oldKey] = msg.data\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n        }\n    }\n\n    private bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        const worker = new Worker('workers/colors.js')\n        worker.postMessage([[this.ary, data], this.reloadBgKey])\n\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors?.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    get color1(): color {\n        return this.getAndValidate(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidate(2)\n    }\n\n    private getAndValidate(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this.ary.slice(0, 1001))\n    }\n\n    shuffle() {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     * Updates ary, ensuring that there are always >= 2 elements.\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color.\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        this.selectedColors.push(selectedColor)\n\n        const moreThan2ColorsRemaining = this.ary.length > 2\n\n        if (moreThan2ColorsRemaining) {\n            this.pop2()\n        } else {\n            this.resetAry()\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private pop2() {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    private resetAry() {\n        this.validateAry()\n\n        const favoriteColorFound = this.selectedColors.length === 1\n\n        if (favoriteColorFound) {\n            this.selectedColors.push(this.selectedColors[0]!) // must be defined because we just pushed a value\n        }\n\n        this.reset()\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    /**\n     * Shuffles `this.selectedColors`, asserts that is is a `colorsAry`,\n     * sets `this.ary = <the shuffled ary>`, and clears `this.selectedColors`\n     */\n    private reset() {\n        const newAry = shuffle(this.selectedColors)\n        assertColorsAry(newAry)\n        this.ary = newAry\n        this.selectedColors = []\n    }\n\n    private get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n}\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData, color } from './colors'\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\ninterface GameLoadArys {\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n    colors: ArrayBuffer\n}\n\nexport class Game {\n    static MAX_COLORS = 0x1000000\n\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    constructor(arys?: GameLoadArys, props?: GameProps) {\n        if (!arys || !props) {\n            this._init()\n        } else {\n            this._load(arys, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor() {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = Game.MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(arys: GameLoadArys, props: GameProps) {\n        this.eliminatedColors = new CondensedColors(arys.eliminated)\n        this.selectedColors = new CondensedColors(arys.selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: arys.colors,\n            eliminated: arys.eliminated,\n            selected: arys.selected,\n        }\n\n        this._buildColors(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors(data?: ColorsLoadData) {\n        this._colors = new Colors(data)\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            Game.MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async signupOrLogin(formElement: HTMLFormElement, action: string) {\n        const form = new FormData(formElement)\n\n        const data = {\n            method: 'post',\n            body: form,\n        } as const\n\n        if (action === 'login') {\n            return await this.tryLogin(data)\n        }\n\n        const email = form.get('identity') as string\n        form.set('email', email)\n        if (action === 'changepw') {\n            return await this.tryChangePw(data)\n        }\n\n        const pw = form.get('password') as string | null\n        if (!pw || !email) {\n            return Error(\n                'Something went wrong - please refresh the page and try again.'\n            )\n        }\n\n        form.append('passwordConfirm', pw)\n\n        return await this.trySignup(data)\n    }\n\n    private async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    private async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    private async tryChangePw(data: AuthData): Promise<Error> {\n        return new Error(\"Method 'tryChangePw' is not implemented!\")\n    }\n\n    async save(app: App): Promise<boolean> {\n        if (app.user.id === 'guest') {\n            return false\n        }\n\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        const rv = await this._createOrUpdate(app, game?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(app: App) {\n        if (app.user.id === 'guest') {\n            return\n        }\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        if (!game) {\n            return\n        }\n\n        const [eliminated, selected, colors] = await this._getFiles(game)\n\n        if (!eliminated || !selected || !colors) {\n            return\n        }\n\n        app.game = new Game(\n            {\n                eliminated,\n                selected,\n                colors,\n            },\n            game.properties\n        )\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(app: App, gameId?: string): Promise<boolean> {\n        const form = this._buildForm(app)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n        return true\n    }\n\n    private _buildForm(app: App): FormData {\n        const elimColorBlob = app.game.eliminatedColors.blob\n        const selectColorBlob = app.game.selectedColors.blob\n        const colorsBlob = new Blob([app.game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(app.game.properties))\n        form.set('user', app.user.id)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: game.properties,\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n                colors: game.colors,\n            }\n        } catch (error) {\n            console.log(error)\n\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "import { Game } from './game'\nimport { User } from './user'\n\nexport class Ui {\n    static updateAuth(user: User | string) {\n        const name = typeof user === 'string' ? user : user.email\n        document.querySelector('.login')!.classList.add('hidden')\n        document.querySelector('#logout-btn')!.classList.remove('hidden')\n        document.querySelector('.welcome-user')!.textContent = `Welcome ${name}`\n    }\n\n    static updateGame(game: Game) {\n        Ui.tryUpdateCurIter(game)\n        Ui.tryUpdateColorsRemaining(game)\n        Ui.tryUpdateColors(game)\n    }\n\n    private static tryUpdateCurIter(game: Game) {\n        const currenIter = document.querySelector('.current-iteration')\n        if (currenIter instanceof HTMLSpanElement) {\n            currenIter.textContent = game.currentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColorsRemaining(game: Game) {\n        const colorsRemaining = document.querySelector(\n            '.colors-remaining-cur-iter'\n        )\n        if (colorsRemaining instanceof HTMLSpanElement) {\n            colorsRemaining.textContent =\n                game.colorsRemainingCurrentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColors(game: Game) {\n        const color1 = document.querySelector('#color1')\n        const color2 = document.querySelector('#color2')\n\n        const colorsExist =\n            color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement\n\n        if (!colorsExist) {\n            return\n        }\n\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = Ui.intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = Ui.intToHex(game.color1)\n            bgColor2 = Ui.intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n\n    private static intToHex(num: number) {\n        return num.toString(16).padStart(6, '0')\n    }\n}\n", "import { Ui } from './ui'\nimport { User, getUser } from './user'\n\nexport class Auth {\n    static saveLocal(user: User) {\n        localStorage.setItem('hasUserSaved', 'true')\n        localStorage.setItem('id', user.id)\n        localStorage.setItem('email', user.email)\n    }\n\n    static clearLocal() {\n        localStorage.removeItem('hasUserSaved')\n        localStorage.removeItem('id')\n        localStorage.removeItem('email')\n    }\n\n    static shouldSaveLocal(form: HTMLFormElement) {\n        const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n        return (\n            stayLoggedInElement instanceof HTMLInputElement &&\n            stayLoggedInElement.checked\n        )\n    }\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport async function tryLocalLogin(): Promise<User | Error> {\n    if (!localStorage.getItem('hasUserSaved')) {\n        return Error('User ID is not saved locally')\n    }\n\n    Ui.updateAuth(localStorage.getItem('email') as string)\n\n    const id = localStorage.getItem('id') as string\n\n    const response = await _fetchUsers(`records/${id}`)\n\n    return await _parseResponse(response)\n}\n\nasync function _parseResponse(\n    response: Response,\n    propName?: string\n): Promise<User | Error> {\n    const json = await response.json()\n\n    if (response.status != 200) {\n        return Error(json.message)\n    }\n\n    return getUser(propName ? json[propName] : json)\n}\n\nasync function _fetchUsers(path: string, data?: AuthData): Promise<Response> {\n    return await fetch(\n        `http://34.42.14.226:8090/api/collections/users/${path}`,\n        data\n    )\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { Ui } from './ui'\nimport { Game } from './game'\nimport { Auth, tryLocalLogin } from './auth'\nimport { User, guestUser } from './user'\nimport { Db } from './db'\nimport { NotifyType, notify } from './notification'\n\nfunction assertType<T>(\n    elem: any,\n    cls: new (...a: any) => T\n): asserts elem is T {\n    if (!(elem instanceof cls)) {\n        notify(\n            NotifyType.error,\n            'Something went wrong - please refresh the page and try again.'\n        )\n        throw new TypeError('Element is not an instance of ' + cls)\n    }\n}\n\nfunction getAndAssertType<T>(selector: string, cls: new (...a: any) => T): T {\n    const elem = document.querySelector(selector)\n    assertType(elem, cls)\n    return elem\n}\n\nfunction getButton(selector: string): HTMLButtonElement {\n    return getAndAssertType(selector, HTMLButtonElement)\n}\n\nexport class App {\n    private _user: User\n    private _game: Game\n    private db: Db\n\n    private static isInternal: boolean = false\n\n    constructor() {\n        if (!App.isInternal) {\n            throw new TypeError('App is not constructable.')\n        }\n        this._user = guestUser()\n        this._game = new Game()\n        this.db = new Db('http', '34.42.14.226', '8090')\n\n        App.isInternal = false\n    }\n\n    static async start() {\n        App.isInternal = true\n        const app = new App()\n        app.addEventListeners()\n        const user = await tryLocalLogin()\n\n        if (user instanceof Error || !user) {\n            Ui.updateGame(app.game)\n            return\n        }\n\n        app._user = user\n        Ui.updateAuth(app.user)\n\n        await app.db.load(app)\n        Ui.updateGame(app.game)\n    }\n\n    get user(): User {\n        return this._user\n    }\n\n    get game() {\n        return this._game\n    }\n\n    set game(game: Game) {\n        this._game = game\n    }\n\n    private addEventListeners() {\n        this.addAuthEventListeners()\n        this.addGameEventListeners()\n    }\n\n    private addAuthEventListeners() {\n        this.addLoginEventListener()\n        this.addLogoutEventListener()\n    }\n\n    private addLoginEventListener() {\n        getAndAssertType('.login', HTMLFormElement).onsubmit =\n            this.trySignupOrLogin\n    }\n\n    private async trySignupOrLogin(e: SubmitEvent) {\n        const form = e.target\n        assertType(form, HTMLFormElement)\n\n        const user = await this.db.signupOrLogin(\n            form,\n            e.submitter?.dataset.action!\n        )\n\n        if (user instanceof Error) {\n            notify(NotifyType.error, user.message)\n            return\n        }\n\n        this._user = user\n\n        if (Auth.shouldSaveLocal(form)) {\n            Auth.saveLocal(user)\n        } else {\n            Auth.clearLocal()\n        }\n\n        form.reset()\n        Ui.updateAuth(this.user)\n    }\n\n    private addLogoutEventListener() {\n        getAndAssertType('#logout-btn', HTMLInputElement).onclick = e => {\n            this.logout(e as PointerEvent)\n            this._user = guestUser()\n        }\n    }\n\n    private logout(e: PointerEvent) {\n        if (e.target instanceof HTMLFormElement) {\n            e.target.reset()\n        }\n\n        Auth.clearLocal()\n\n        document.querySelector('.login')!.classList.remove('hidden')\n        document.querySelector('#logout-btn')!.classList.add('hidden')\n        document.querySelector('.welcome-user')!.textContent = ''\n    }\n\n    private addGameEventListeners() {\n        this.addShuffleEventListener()\n        this.addClearEventListener()\n        this.addColorEventListener()\n    }\n\n    private addShuffleEventListener() {\n        getButton('.new-colors').onclick = async () => {\n            this.game.shuffleColors()\n            this.saveGameAndUpdate()\n        }\n    }\n    private addClearEventListener() {\n        getButton('.clear-data').onclick = async () => {\n            this.game.reset()\n            this.saveGameAndUpdate()\n        }\n    }\n\n    private addColorEventListener() {\n        const clickColor = async (num: 1 | 2) => {\n            this.game.selectColor(num)\n            this.saveGameAndUpdate()\n        }\n\n        getAndAssertType('#color1', HTMLDivElement).onclick = async () =>\n            await clickColor(1)\n        getAndAssertType('#color2', HTMLDivElement).onclick = async () =>\n            await clickColor(2)\n    }\n\n    private saveGameAndUpdate() {\n        this.db.save(this)\n        Ui.updateGame(this.game)\n    }\n}\n", "import { Db } from 'scripts/db'\nimport { App } from 'scripts/app'\nimport { TestGame } from './game.test'\n\nconst app = new App()\n\nconst db = new Db('http', '34.42.14.226', '8090')\n\nfunction assertTrue(val: any): asserts val is true {\n    if (!val) {\n        throw new Error('val is not true')\n    }\n}\n\nfor (let i = 0; i < 0xfffff; i++) {\n    app.game.selectColor(1)\n}\n\nasync function testSaveAndLoad() {\n    const g = app.game as TestGame\n    const eliminated = g.eliminatedColors\n    const selected = g.selectedColors\n    const [colors, nextIterationColors] = g.testingProps\n\n    await db.save(app)\n    await db.load(app)\n\n    for (let i = 0; i < 0x80000; i++) {\n        console.log(i, eliminated.raw[0])\n\n        assertTrue(eliminated.raw[i] === g.eliminatedColors.raw[i])\n        assertTrue(selected.raw[i] === g.selectedColors.raw[i])\n    }\n\n    const [newColors, newNextIterationColors] = g.testingProps\n\n    let i = 0,\n        n = 0\n    console.log('testing colors')\n\n    for (const color of colors) {\n        assertTrue(newColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    ;(i = 0), (n = 0)\n    console.log('testing nextIterationColors')\n\n    for (const color of nextIterationColors) {\n        assertTrue(newNextIterationColors.includes(color))\n        i++\n        if (i % 100 === 0) {\n            console.log('.')\n        }\n\n        if (i % 1000 === 0) {\n            console.log(n)\n            n++\n        }\n    }\n\n    console.log('all are equal')\n}\n\nexport async function testDb() {\n    //await testSaveGame()\n    //await testGetGame()\n    await testSaveAndLoad()\n}\n", "import { testDb } from './db.test'\nimport { gameTests } from './game.test'\nimport { testPerformance } from './performance.test'\n//testPerformance()\n//gameTests()\ntestDb()\n\n// 4753427\n"],
  "mappings": "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",
  "names": ["color", "color", "app", "app", "i", "color"]
}
