{
  "version": 3,
  "sources": ["../scripts/condensedColors.ts", "../scripts/game.ts", "../scripts/utils/utils.ts", "../scripts/colors.ts", "../scripts/workers/colors.ts"],
  "sourcesContent": ["import type { color } from './colors'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error(\n                `Value is undefined but should not be - val: '${val}'`\n            )\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals, 0, 0x80000)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData, color } from './colors'\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nexport interface GameLoadArys {\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n    colors: ArrayBuffer\n}\n\nexport class Game {\n    static MAX_COLORS = 0x1000000\n\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    private _isNewGame: boolean\n    _colors: Colors\n\n    id?: string\n\n    constructor(arys?: GameLoadArys, props?: GameProps) {\n        if (!arys || !props) {\n            this._init()\n        } else {\n            this._load(arys, props)\n        }\n    }\n\n    get isNewGame() {\n        return this._isNewGame\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor() {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this._isNewGame = true\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = Game.MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(arys: GameLoadArys, props: GameProps) {\n        this._isNewGame = false\n        this.eliminatedColors = new CondensedColors(arys.eliminated)\n        this.selectedColors = new CondensedColors(arys.selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: arys.colors,\n            eliminated: arys.eliminated,\n            selected: arys.selected,\n        }\n\n        this._buildColors(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors(data?: ColorsLoadData) {\n        this._colors = new Colors(data)\n    }\n\n    private _select(num: 1 | 2): void {\n        this._isNewGame = false\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            Game.MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import { Game } from './game'\nimport { shuffle } from './utils/utils'\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    protected favoriteColorFound: boolean\n    private static bgKey: number\n\n    constructor(data?: ColorsLoadData) {\n        this.init(data)\n    }\n\n    private init(data?: ColorsLoadData) {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n        this.favoriteColorFound = false\n\n        if (data) {\n            this.ary = ColorsAry.from(data.next1000)\n        } else {\n            this.first1000()\n        }\n\n        this.bg(data)\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * Game.MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        const worker = new Worker('workers/colors.js')\n        worker.postMessage([[this.ary, data], this.reloadBgKey])\n\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors?.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    protected isInvalid(key: any) {\n        return typeof key !== 'number' || key !== Colors.bgKey\n    }\n\n    get color1(): color {\n        return this.getAndValidate(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidate(2)\n    }\n\n    private getAndValidate(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return Uint32Array.from(this.ary.slice(-1000, this.ary.length))\n    }\n\n    shuffle() {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     * Updates ary, ensuring that there are always >= 2 elements.\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color.\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        if (this.favoriteColorFound) {\n            return [selectedColor, rejectedColor]\n        }\n\n        this.selectedColors.push(selectedColor)\n\n        const moreThan2ColorsRemaining = this.ary.length > 2\n\n        if (moreThan2ColorsRemaining) {\n            this.pop2()\n        } else {\n            this.resetAry()\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private pop2() {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    protected resetAry() {\n        this.validateAry()\n\n        this.favoriteColorFound = this.selectedColors.length === 1\n\n        if (this.favoriteColorFound) {\n            this.selectedColors.push(this.selectedColors[0]!) // must be defined because we just pushed a value\n        }\n\n        this.reset()\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    /**\n     * Shuffles `this.selectedColors`, asserts that is is a `colorsAry`,\n     * sets `this.ary = <the shuffled ary>`, and clears `this.selectedColors`\n     */\n    private reset() {\n        const newAry = shuffle(this.selectedColors)\n        assertColorsAry(newAry)\n        this.ary = newAry\n        this.selectedColors = []\n    }\n\n    protected get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n}\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n", "import { assertColor, assertColorsAry, color, colorsAry } from 'scripts/colors'\nimport { CondensedColors } from 'scripts/condensedColors'\nimport { Game } from 'scripts/game'\nimport { shuffle } from 'scripts/utils/utils'\n\nself.onmessage = message => {\n    const [[colors, arrays], key] = message.data\n\n    if (arrays === null) {\n        const shuffledColors = fullShuffledArray(colors)\n        assertColorsAry(shuffledColors)\n        sendIncrementally(shuffledColors, [], key)\n        return\n    }\n\n    const eliminated = new CondensedColors(arrays.eliminated)\n    const selected = new CondensedColors(arrays.selected)\n\n    const [colorsToAdd, nextIterColors] = doWork(colors, {\n        eliminated,\n        selected,\n    })\n\n    assertColorsAry(colorsToAdd)\n    sendIncrementally(colorsToAdd, nextIterColors, key)\n}\n\nfunction fullShuffledArray(origColors: number[]): number[] {\n    const colors: number[] = []\n    for (let i = 0; i < Game.MAX_COLORS; i++) {\n        if (origColors.includes(i)) {\n            continue\n        }\n        colors.push(i)\n    }\n\n    return shuffle(colors)\n}\n\nfunction doWork(\n    colors: colorsAry,\n    arrays: {\n        eliminated: CondensedColors\n        selected: CondensedColors\n    }\n): [color[], color[]] {\n    // go through all numbers\n    // - if a number is included in colors, skip it\n    // - if a number is included in eliminatedColors, skip it\n    // - if a color is included in selectedColors, add it to nextIterColors\n    const newColors = []\n    const nextIterColors = []\n\n    for (let color = 0; color < Game.MAX_COLORS; color++) {\n        assertColor(color)\n        const isEliminated = arrays.eliminated.has(color)\n        const isSelected = arrays.selected.has(color)\n        const alreadyIncluded = colors.includes(color)\n\n        if (isSelected) {\n            nextIterColors.push(color)\n            continue\n        }\n\n        if (isEliminated || alreadyIncluded) {\n            continue\n        }\n\n        newColors.push(color)\n    }\n\n    return [shuffle(newColors), shuffle(nextIterColors)]\n}\n\nfunction sendIncrementally(\n    colors: color[],\n    nextIterColors: color[],\n    key: number\n): void {\n    const HUNDRED_THOU = 100000\n    for (let i = 0; i < 170; i++) {\n        const min = i * HUNDRED_THOU\n        const max = min + HUNDRED_THOU\n\n        if (min >= Game.MAX_COLORS) {\n            break\n        }\n\n        const colorsSubset = colors.slice(min, max)\n        const nextIterSubset = nextIterColors.slice(min, max)\n\n        self.postMessage([[colorsSubset, nextIterSubset], key])\n    }\n}\n"],
  "mappings": "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",
  "names": ["color", "color", "color"]
}
