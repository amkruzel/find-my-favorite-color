{
  "version": 3,
  "sources": ["scripts/ui.ts", "scripts/condensedColors.ts", "scripts/utils/utils.ts", "scripts/colors.ts", "scripts/game.ts", "scripts/auth.ts", "scripts/user.ts", "scripts/formConverter.ts", "scripts/db.ts", "scripts/app.ts", "scripts/notification.ts", "scripts/script.ts"],
  "sourcesContent": ["import { Game } from 'scripts/game'\nimport { User } from 'scripts/user'\nimport { App } from 'scripts/app'\n\nexport class Ui {\n    static updateAll(app: App) {\n        Ui.updateAuth(app.user)\n        Ui.updateGame(app.game)\n    }\n\n    static showLoadingMessage() {\n        Ui.appLoadingMessage('Loading...')\n\n        const game = {\n            currentIteration: '...',\n            colorsRemainingCurrentIteration: '...',\n            color1: 4095,\n            color2: 4095,\n        } as unknown as Game\n\n        Ui.updateGame(game)\n    }\n\n    static hideLoadingMessage() {\n        Ui.appLoadingMessage()\n    }\n\n    private static appLoadingMessage(text?: string) {\n        const message = document.querySelector('.game-loading-message')\n\n        if (message instanceof HTMLDivElement) {\n            message.textContent = text ?? ''\n        }\n    }\n\n    static updateAuth(user: User | string) {\n        const name = typeof user === 'object' ? user.email : user\n        const isLoggedIn = name !== 'guest'\n\n        const loginClasses = document.querySelector('.login')!.classList\n        const logoutClasses =\n            document.querySelector('.logout-button')!.classList\n        const welcomeMessage = document.querySelector('.welcome-user')!\n\n        const signupLoginPopupButtonClasses =\n            document.querySelector('.auth-popup-button')!.classList\n\n        if (isLoggedIn) {\n            loginClasses.add('hidden')\n            signupLoginPopupButtonClasses.add('hidden')\n            logoutClasses.remove('hidden')\n            welcomeMessage.textContent = `Welcome, ${name}`\n        } else {\n            loginClasses.remove('hidden')\n            signupLoginPopupButtonClasses.remove('hidden')\n            logoutClasses.add('hidden')\n            welcomeMessage.textContent = ''\n        }\n    }\n\n    static updateGame(game: Game) {\n        Ui.tryUpdateCurIter(game)\n        Ui.tryUpdateColorsRemaining(game)\n        Ui.tryUpdateColors(game)\n    }\n\n    private static tryUpdateCurIter(game: Game) {\n        const currenIter = document.querySelector('.current-iteration')\n        if (currenIter instanceof HTMLSpanElement) {\n            currenIter.textContent = game.currentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColorsRemaining(game: Game) {\n        const colorsRemaining = document.querySelector(\n            '.colors-remaining-cur-iter'\n        )\n        if (colorsRemaining instanceof HTMLSpanElement) {\n            colorsRemaining.textContent =\n                game.colorsRemainingCurrentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColors(game: Game) {\n        const color1 = document.querySelector('#color1')\n        const color2 = document.querySelector('#color2')\n\n        const colorsExist =\n            color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement\n\n        if (!colorsExist) {\n            return\n        }\n\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = Ui.intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = Ui.intToHex(game.color1)\n            bgColor2 = Ui.intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n\n    private static intToHex(num: number) {\n        return num.toString(16).padStart(6, '0')\n    }\n}\n", "import type { color } from './colors'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error(\n                `Value is undefined but should not be - val: '${val}'`\n            )\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals, 0, 0x80000)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n", "// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import { Game } from './game'\nimport { shuffle } from './utils/utils'\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    protected favoriteColorFound: boolean\n    private static bgKey: number\n\n    constructor(data?: ColorsLoadData) {\n        this.init(data)\n    }\n\n    private init(data?: ColorsLoadData) {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n        this.favoriteColorFound = false\n\n        if (data) {\n            this.ary = ColorsAry.from(data.next1000)\n        } else {\n            this.first1000()\n        }\n\n        this.bg(data)\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * Game.MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        const worker = new Worker('workers/colors.js')\n        worker.postMessage([[this.ary, data], this.reloadBgKey])\n\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors?.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    protected isInvalid(key: any) {\n        return typeof key !== 'number' || key !== Colors.bgKey\n    }\n\n    get color1(): color {\n        return this.getAndValidate(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidate(2)\n    }\n\n    private getAndValidate(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return Uint32Array.from(this.ary.slice(-1000, this.ary.length))\n    }\n\n    shuffle() {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     * Updates ary, ensuring that there are always >= 2 elements.\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color.\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        if (this.favoriteColorFound) {\n            return [selectedColor, rejectedColor]\n        }\n\n        this.selectedColors.push(selectedColor)\n\n        const moreThan2ColorsRemaining = this.ary.length > 2\n\n        if (moreThan2ColorsRemaining) {\n            this.pop2()\n        } else {\n            this.resetAry()\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private pop2() {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    protected resetAry() {\n        this.validateAry()\n\n        this.favoriteColorFound = this.selectedColors.length === 1\n\n        if (this.favoriteColorFound) {\n            this.selectedColors.push(this.selectedColors[0]!) // must be defined because we just pushed a value\n        }\n\n        this.reset()\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    /**\n     * Shuffles `this.selectedColors`, asserts that is is a `colorsAry`,\n     * sets `this.ary = <the shuffled ary>`, and clears `this.selectedColors`\n     */\n    private reset() {\n        const newAry = shuffle(this.selectedColors)\n        assertColorsAry(newAry)\n        this.ary = newAry\n        this.selectedColors = []\n    }\n\n    protected get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n}\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData, color } from './colors'\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nexport interface GameLoadArys {\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n    colors: ArrayBuffer\n}\n\nexport class Game {\n    static MAX_COLORS = 0x1000000\n\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    private _isNewGame: boolean\n    _colors: Colors\n\n    id?: string\n\n    constructor(arys?: GameLoadArys, props?: GameProps) {\n        if (!arys || !props) {\n            this._init()\n        } else {\n            this._load(arys, props)\n        }\n    }\n\n    get isNewGame() {\n        return this._isNewGame\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor() {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this._isNewGame = true\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = Game.MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(arys: GameLoadArys, props: GameProps) {\n        this._isNewGame = false\n        this.eliminatedColors = new CondensedColors(arys.eliminated)\n        this.selectedColors = new CondensedColors(arys.selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: arys.colors,\n            eliminated: arys.eliminated,\n            selected: arys.selected,\n        }\n\n        this._buildColors(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors(data?: ColorsLoadData) {\n        this._colors = new Colors(data)\n    }\n\n    private _select(num: 1 | 2): void {\n        this._isNewGame = false\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            Game.MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "import { User } from './user'\n\nexport class Auth {\n    static saveLocal(user: User) {\n        localStorage.setItem('hasUserSaved', 'true')\n        localStorage.setItem('id', user.id)\n        localStorage.setItem('email', user.email)\n    }\n\n    static clearLocal() {\n        localStorage.removeItem('hasUserSaved')\n        localStorage.removeItem('id')\n        localStorage.removeItem('email')\n    }\n\n    static shouldSaveLocal(form: HTMLFormElement) {\n        const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n        return (\n            stayLoggedInElement instanceof HTMLInputElement &&\n            stayLoggedInElement.checked\n        )\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function userFrom(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return userFrom({\n        id: 'guest',\n        email: 'guest',\n    })\n}\n", "import { Game } from './game'\n\nexport class FormConverter {\n    static signup(fe: HTMLFormElement): FormData {\n        const form = new FormData(fe)\n\n        FormConverter.tryAddProp(form, 'password', 'passwordConfirm')\n\n        return form\n    }\n\n    static login(fe: HTMLFormElement): FormData {\n        const form = new FormData(fe)\n\n        FormConverter.tryAddProp(form, 'identity', 'email')\n\n        return form\n    }\n\n    static from(obj: Map<string, string>): FormData {\n        const form = new FormData()\n\n        for (const [key, val] of obj) {\n            form.append(key, val)\n        }\n\n        return form\n    }\n\n    static game(game: Game, userId: string): FormData {\n        const elimColorBlob = game.eliminatedColors.blob\n        const selectColorBlob = game.selectedColors.blob\n        const colorsBlob = new Blob([game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(game.properties))\n        form.set('user', userId)\n\n        return form\n    }\n\n    private static tryAddProp(\n        form: FormData,\n        nameToGet: string,\n        nameToAdd: string\n    ): void {\n        const prop = form.get(nameToGet)\n\n        if (!prop || !(typeof prop === 'string')) {\n            return\n        }\n\n        form.set(nameToAdd, prop)\n    }\n}\n", "import { FormConverter } from './formConverter'\nimport { GameProps, Game } from './game'\nimport { User, userFrom } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nclass DbError extends Error {\n    constructor(message?: string, options?: ErrorOptions) {\n        super(message, options)\n        this.name = 'DbError'\n    }\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(path: string) {\n        this._path = path\n        this._pendingSave = false\n    }\n\n    /**\n     * required fields are:\n     * - email\n     * - password\n     * - passwordConfirm\n     */\n    async signup(f: FormData): Promise<User> {\n        return await this.try('signup', f)\n    }\n\n    /**\n     * required fields are:\n     * - identity\n     * - password\n     */\n    async login(f: FormData): Promise<User> {\n        return await this.try('login', f)\n    }\n\n    async getUser(id: string): Promise<User> {\n        const res = await this._getUser(`records/${id}`)\n\n        return await this._parseUserResponse(res)\n    }\n\n    private async try(\n        action: 'login' | 'signup' | 'changepw',\n        form: FormData\n    ): Promise<User> {\n        const data = {\n            method: 'post',\n            body: form,\n        } as const\n\n        switch (action) {\n            case 'login':\n                return await this.tryLogin(data)\n            case 'signup':\n                return await this.trySignup(data)\n            case 'changepw':\n                return await this.tryChangePw(data)\n            default:\n                throw new Error(`'action' was not an expected value`)\n        }\n    }\n\n    private async tryLogin(data: AuthData): Promise<User> {\n        try {\n            const response = await this._getUser('auth-with-password', data)\n            return await this._parseUserResponse(response, 'record')\n        } catch (err) {\n            throw new DbError(\n                'Unable to login; email or password is incorrect.',\n                { cause: err }\n            )\n        }\n    }\n\n    private async trySignup(data: AuthData): Promise<User> {\n        try {\n            const response = await this._getUser('records', data)\n            return await this._parseUserResponse(response)\n        } catch (err) {\n            throw new DbError('Unable to sign-up; user might already exist.', {\n                cause: err,\n            })\n        }\n    }\n\n    private async tryChangePw(data: AuthData): Promise<User> {\n        throw new Error(\"Method 'tryChangePw' is not implemented!\")\n    }\n\n    private async _getUser(path: string, data?: AuthData): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseUserResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User> {\n        const json = await response.json()\n\n        if (!response.ok) {\n            throw new Error(json?.message, {\n                cause: json,\n            })\n        }\n\n        return userFrom(propName ? json[propName] : json)\n    }\n\n    async save(game: Game, userId: string): Promise<void> {\n        if (this.cannotSaveNow(userId)) {\n            return\n        }\n\n        this._pendingSave = true\n\n        const prevGame = await this._getGameIfOneExists(userId)\n        await this._createOrUpdate(game, userId, prevGame?.id)\n\n        this._pendingSave = false\n    }\n\n    private cannotSaveNow(userId: string) {\n        return userId === 'guest' || this._pendingSave\n    }\n\n    async load(userId: string): Promise<Game> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return new Game()\n        }\n\n        const [eliminated, selected, colors] = await this._getFiles(game)\n\n        return new Game(\n            {\n                eliminated,\n                selected,\n                colors,\n            },\n            game.properties\n        )\n    }\n\n    async delete(userId: string): Promise<void> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return\n        }\n\n        await this._delete(game.id)\n    }\n\n    protected async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        const response = await fetch(\n            `${this.path.games}/records?filter=(user='${userId}')`\n        )\n\n        const json = await response.json()\n\n        if (json.totalItems === 0) {\n            return null\n        }\n\n        if (!response.ok) {\n            throw new DbError(json?.message, {\n                cause: { code: json?.code, data: json?.data },\n            })\n        }\n\n        if (json.totalItems !== 1) {\n            throw new DbError('User has more than one game saved.')\n        }\n\n        const game: GameData = json.items[0]\n\n        return {\n            id: game.id,\n            user: game.user,\n            properties: game.properties,\n            eliminatedColors: game.eliminatedColors,\n            selectedColors: game.selectedColors,\n            colors: game.colors,\n        } as const\n    }\n\n    private async _createOrUpdate(\n        game: Game,\n        userId: string,\n        gameId?: string\n    ): Promise<void> {\n        const form = FormConverter.game(game, userId)\n\n        if (gameId) {\n            await this._patch(form, gameId)\n        } else {\n            await this._post(form)\n        }\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _delete(id: string): Promise<Response> {\n        return fetch(`${this.path.games}/records/${id}`, { method: 'DELETE' })\n    }\n\n    protected async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer> {\n        const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n\n        if (!res.ok) {\n            throw new DbError(`File ${filename} was unable to be retrieved.`, {\n                cause: await res.json(),\n            })\n        }\n\n        return await res.arrayBuffer()\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n}\n", "import { Ui } from './ui'\nimport { Game } from './game'\nimport { Auth } from './auth'\nimport { User, guestUser } from './user'\nimport { Db } from './db'\nimport { FormConverter } from './formConverter'\n\nexport class App {\n    private _user: User\n    private _game: Game\n    private _db: Db\n\n    constructor() {\n        this._user = guestUser()\n        this._game = new Game()\n        this._db = new Db('https://fmfc.alexkruzel.com')\n    }\n\n    get user(): User {\n        return this._user\n    }\n\n    get game() {\n        return this._game\n    }\n\n    async init(): Promise<void> {\n        await this._init()\n    }\n\n    private async _init(): Promise<void> {\n        try {\n            await this.tryLocalLogin()\n            await this.loadGame()\n        } catch (err) {}\n    }\n\n    private async tryLocalLogin(): Promise<void> {\n        if (!localStorage.getItem('hasUserSaved')) {\n            return\n        }\n\n        Ui.updateAuth(localStorage.getItem('email') as string)\n\n        const id = localStorage.getItem('id') as string\n\n        this._user = await this._db.getUser(id)\n    }\n\n    async loadGame(): Promise<void> {\n        await this._loadGame()\n    }\n\n    async _loadGame(): Promise<void> {\n        if (!this.isLoggedIn) {\n            return\n        }\n\n        try {\n            const game = await this._db.load(this._user.id)\n\n            if (!this.isLoggedIn) {\n                return\n            }\n\n            this._game = game\n        } catch (error) {}\n    }\n\n    private async saveGame(): Promise<void> {\n        await this._saveGame()\n    }\n\n    private async _saveGame(): Promise<void> {\n        if (!this.isLoggedIn) {\n            return\n        }\n\n        try {\n            await this._db.save(this._game, this._user.id)\n        } catch (err) {}\n    }\n\n    private async deleteGame() {\n        this._deleteGame()\n    }\n\n    private async _deleteGame(): Promise<void> {\n        if (!this.isLoggedIn) {\n            return\n        }\n\n        try {\n            await this._db.delete(this._user.id)\n        } catch (err) {}\n    }\n\n    logoutUser(e: Event) {\n        if (e.target instanceof HTMLFormElement) {\n            e.target.reset()\n        }\n\n        this._user = guestUser()\n        Auth.clearLocal()\n    }\n\n    get isLoggedIn(): boolean {\n        return this._user.id !== 'guest'\n    }\n\n    async login(form: HTMLFormElement): Promise<void> {\n        this._user = await this._db.login(FormConverter.login(form))\n        this.maybeSaveAuthLocally(form)\n    }\n\n    async signup(form: HTMLFormElement): Promise<void> {\n        this._user = await this._db.signup(FormConverter.signup(form))\n        this.maybeSaveAuthLocally(form)\n    }\n\n    private maybeSaveAuthLocally(form: HTMLFormElement): void {\n        if (Auth.shouldSaveLocal(form)) {\n            Auth.saveLocal(this._user)\n        } else {\n            Auth.clearLocal()\n        }\n    }\n\n    debug() {\n        console.log(this)\n    }\n\n    shuffleGameColors() {\n        this.gameAction('shuffle')\n    }\n\n    resetGame() {\n        this.gameAction('reset')\n    }\n\n    selectGameColor(num: 1 | 2) {\n        this.gameAction('selectColor', num)\n    }\n\n    private async gameAction(\n        action: 'shuffle' | 'reset' | 'selectColor',\n        num?: 1 | 2\n    ) {\n        switch (action) {\n            case 'shuffle':\n                this.game.shuffleColors()\n                break\n            case 'reset':\n                this.game.reset()\n                await this.deleteGame()\n                return\n            case 'selectColor':\n                if (num) {\n                    this._game.selectColor(num)\n                }\n                break\n            default:\n                break\n        }\n        await this.saveGame()\n    }\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { App } from './app'\nimport { NotifyType, notify } from './notification'\nimport { Ui } from './ui'\n\n/**\n * Event handlers\n */\nconst uiElements = [\n    {\n        selector: '.auth-popup-button',\n        handler: loginSigupModalHandler,\n    },\n    {\n        selector: '.login',\n        handler: loginSignupHandler,\n        action: 'submit',\n    },\n    {\n        selector: '.logout-button',\n        handler: logoutHandler,\n    },\n    {\n        selector: '.close-modal',\n        handler: closeModalHandler,\n    },\n    {\n        selector: '.debug',\n        handler: debugHandler,\n    },\n    {\n        selector: '.new-colors',\n        handler: shuffleHandler,\n    },\n    {\n        selector: '.clear-data',\n        handler: resetHandler,\n    },\n    {\n        selector: '#color1',\n        handler: selectColor1Handler,\n    },\n    {\n        selector: '#color2',\n        handler: selectColor2Handler,\n    },\n]\n\nconst app = new App()\n\nasync function main() {\n    for (let elem of uiElements) {\n        document\n            .querySelector(elem.selector)\n            ?.addEventListener(elem.action ?? 'click', elem.handler)\n    }\n\n    Ui.showLoadingMessage()\n\n    await app.init()\n\n    Ui.hideLoadingMessage()\n    Ui.updateAll(app)\n}\n\nmain()\n\nfunction closeModalHandler(e: Event) {\n    const modal = document.querySelector(\n        '.auth-form-container'\n    ) as HTMLDialogElement\n    logoutHandler(e)\n    modal.close()\n}\n\nfunction loginSigupModalHandler() {\n    const modal = document.querySelector(\n        '.auth-form-container'\n    ) as HTMLDialogElement\n    modal.showModal()\n}\n\nasync function loginSignupHandler(e: Event) {\n    const form = e.target\n\n    if (!(e instanceof SubmitEvent) || !(form instanceof HTMLFormElement)) {\n        return\n    }\n\n    const action = e.submitter?.dataset.action\n\n    try {\n        if (action === 'login') {\n            await app.login(form)\n        } else if (action === 'signup') {\n            await app.signup(form)\n        }\n\n        ;(\n            document.querySelector('.auth-form-container') as HTMLDialogElement\n        ).close()\n\n        form.reset()\n\n        Ui.showLoadingMessage()\n        Ui.updateAuth(app.user)\n\n        await app.loadGame()\n        Ui.hideLoadingMessage()\n        Ui.updateGame(app.game)\n    } catch (error) {\n        const message =\n            error.name === 'DbError'\n                ? error.message\n                : 'Something went wrong - please refresh the page and try again.'\n\n        notify(NotifyType.error, message)\n    }\n}\n\nasync function logoutHandler(e: Event) {\n    app.logoutUser(e)\n    Ui.hideLoadingMessage()\n    app.resetGame()\n    Ui.updateAll(app)\n}\n\nfunction debugHandler() {\n    app.debug()\n}\n\nfunction shuffleHandler() {\n    app.shuffleGameColors()\n    Ui.updateAll(app)\n}\n\nfunction resetHandler() {\n    app.resetGame()\n    Ui.updateAll(app)\n}\n\nfunction selectColor1Handler() {\n    selectColor(1)\n}\n\nfunction selectColor2Handler() {\n    selectColor(2)\n}\n\nfunction selectColor(num: 1 | 2) {\n    app.selectGameColor(num)\n    Ui.updateAll(app)\n}\n"],
  "mappings": "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",
  "names": ["app", "color", "color"]
}
