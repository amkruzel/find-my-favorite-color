{
  "version": 3,
  "sources": ["../scripts/user.ts", "../scripts/auth.ts", "../scripts/eventHandlers.ts", "../scripts/notification.ts", "../scripts/ui.ts", "../scripts/game.ts", "../scripts/app.ts"],
  "sourcesContent": ["export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n", "import { updateLogin } from './ui'\nimport { User, getUser } from './user'\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport async function tryLogin(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('auth-with-password', data)\n\n    return await _parseResponse(response, 'record')\n}\n\nexport async function trySignup(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('records', data)\n\n    return await _parseResponse(response)\n}\n\nexport async function tryChangePw(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('request-password-reset', data)\n\n    console.log(response)\n\n    return await _parseResponse(response)\n}\n\nexport function saveAuthLocal(userId: string, email: string) {\n    localStorage.setItem('hasUserSaved', 'true')\n    localStorage.setItem('id', userId)\n    localStorage.setItem('email', email)\n}\n\nexport async function tryLocalLogin(): Promise<User | Error> {\n    if (!localStorage.getItem('hasUserSaved')) {\n        return Error('User ID is not saved locally')\n    }\n\n    updateLogin(localStorage.getItem('email') as string)\n\n    const id = localStorage.getItem('id') as string\n\n    const response = await _fetchUsers(`records/${id}`)\n\n    return await _parseResponse(response)\n}\n\nexport function clearAuthLocal() {\n    localStorage.removeItem('hasUserSaved')\n    localStorage.removeItem('id')\n    localStorage.removeItem('email')\n}\n\nasync function _parseResponse(\n    response: Response,\n    propName?: string\n): Promise<User | Error> {\n    const json = await response.json()\n\n    if (response.status != 200) {\n        return Error(json.message)\n    }\n\n    return getUser(propName ? json[propName] : json)\n}\n\nasync function _fetchUsers(path: string, data?: AuthData): Promise<Response> {\n    return await fetch(\n        `http://34.42.14.226:8090/api/collections/users/${path}`,\n        data\n    )\n}\n", "import { tryLogin, trySignup, tryChangePw, clearAuthLocal } from './auth'\nimport { User } from './user'\n\nexport async function signupOrLogin(\n    formElement: HTMLFormElement,\n    action: string\n): Promise<User | Error> {\n    const form = new FormData(formElement)\n\n    const data = {\n        method: 'post',\n        body: form,\n    } as const\n\n    if (action === 'login') {\n        return await tryLogin(data)\n    }\n\n    const email = form.get('identity') as string\n    form.set('email', email)\n    if (action === 'changepw') {\n        return await tryChangePw(data)\n    }\n\n    const pw = form.get('password') as string | null\n    if (!pw || !email) {\n        return Error(\n            'Something went wrong - please refresh the page and try again.'\n        )\n    }\n\n    form.append('passwordConfirm', pw)\n\n    return await trySignup(data)\n}\n\nexport function logout(e: PointerEvent): void {\n    console.log('logoutHandler', e)\n\n    if (e.target instanceof HTMLFormElement) {\n        e.target.reset()\n    }\n\n    clearAuthLocal()\n\n    document.querySelector('.login')!.classList.remove('hidden')\n    document.querySelector('#logout-btn')!.classList.add('hidden')\n    document.querySelector('.welcome-user')!.textContent = ''\n}\n\nexport function reset(): void {\n    console.log('resetHandler')\n}\n\nexport function selectColor(num: 1 | 2): void {\n    console.log('selectColorHandler', num)\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { clearAuthLocal, saveAuthLocal } from './auth'\nimport { signupOrLogin, logout } from './eventHandlers'\nimport { NotifyType, notify } from './notification'\nimport { Game, color } from './game'\n\nexport const addEventListeners = (game: Game) => {\n    document\n        .querySelector('.login')!\n        .addEventListener('submit', async (e: SubmitEvent) => {\n            const form = e.target\n\n            if (!(form instanceof HTMLFormElement)) {\n                notify(\n                    NotifyType.error,\n                    'Something went wrong - please refresh the page and try again.'\n                )\n                return\n            }\n\n            const rv = await signupOrLogin(form, e.submitter?.dataset.action!)\n\n            if (rv instanceof Error) {\n                notify(NotifyType.error, rv.message)\n                return\n            }\n\n            if (_shouldSaveAuthLocal(form)) {\n                saveAuthLocal(rv.id, rv.email)\n            } else {\n                clearAuthLocal()\n            }\n\n            form.reset()\n            updateLogin(rv.email)\n        })\n    document\n        .querySelector('#logout-btn')!\n        .addEventListener('click', e => logout(e as PointerEvent))\n    document.querySelector('.new-colors')!.addEventListener('click', () => {\n        game.shuffleColors()\n        updateGameUi(game)\n    })\n    document.querySelector('.clear-data')!.addEventListener('click', () => {\n        game.reset()\n        updateGameUi(game)\n    })\n    document.querySelector('#color1')!.addEventListener('click', () => {\n        game.selectColor(1)\n        updateGameUi(game)\n    })\n    document.querySelector('#color2')!.addEventListener('click', () => {\n        game.selectColor(2)\n        updateGameUi(game)\n    })\n}\n\nexport function updateLogin(user: string) {\n    document.querySelector('.login')!.classList.add('hidden')\n    document.querySelector('#logout-btn')!.classList.remove('hidden')\n    document.querySelector('.welcome-user')!.textContent = `Welcome ${user}`\n}\n\nfunction _shouldSaveAuthLocal(form: HTMLFormElement): boolean {\n    const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n    return (\n        stayLoggedInElement instanceof HTMLInputElement &&\n        stayLoggedInElement.checked\n    )\n}\n\nexport function updateGameUi(game: Game) {\n    const currenIter = document.querySelector('.current-iteration')\n    if (currenIter instanceof HTMLSpanElement) {\n        currenIter.textContent = game.currentIteration.toLocaleString()\n    }\n\n    const colorsRemaining = document.querySelector('.colors-remaining-cur-iter')\n    if (colorsRemaining instanceof HTMLSpanElement) {\n        colorsRemaining.textContent =\n            game.colorsRemainingCurrentIteration.toLocaleString()\n    }\n\n    const color1 = document.querySelector('#color1')\n    const color2 = document.querySelector('#color2')\n\n    if (color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement) {\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = intToHex(game.color1)\n            bgColor2 = intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n}\n\nfunction intToHex(num: color): string {\n    return num.toString(16).padStart(6, '0')\n}\n", "const MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\ntype colorsAry = [color, color, ...color[]]\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error('Not a color!')\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: Uint32Array\n    selectedColors: Uint32Array\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    private _colors: colorsAry\n    private _nextIterationColors: color[]\n\n    constructor() {\n        this._init()\n    }\n\n    public get color1() {\n        return this._colors[this._colors.length - 1] as color\n    }\n\n    public get color2() {\n        return this._colors[this._colors.length - 2] as color\n    }\n\n    public get currentIteration() {\n        return this._currentIteration\n    }\n\n    public get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    public get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    selectColor(num: 1 | 2) {\n        this._updateSelectedColors(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        shuffle(this._colors)\n    }\n\n    isEliminated(color: color) {\n        return this._is(color, 'eliminated')\n    }\n\n    isSelected(color: color) {\n        return this._is(color, 'selected')\n    }\n\n    private _init() {\n        const initColors = (): void => {\n            this._colors = [0, 1] as [color, color]\n\n            for (let i = 2; i < 0x1000000; i++) {\n                this._colors.push(i as color)\n            }\n\n            shuffle(this._colors)\n        }\n\n        this.eliminatedColors = new Uint32Array(0x80000)\n        this.selectedColors = new Uint32Array(0x80000)\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n        this._nextIterationColors = []\n\n        initColors()\n    }\n\n    private _updateSelectedColors(num: 1 | 2): void {\n        const _do = (action: 'select' | 'eliminate', color: color): void => {\n            const [index, bit] = this._split(color)\n            const array =\n                action === 'select' ? 'selectedColors' : 'eliminatedColors'\n\n            assertColor(color)\n            if (action === 'select') {\n                this._nextIterationColors.push(this._colors.pop()!)\n            } else {\n                this._colors.pop()\n            }\n            this[array][index] |= bit\n        }\n\n        const selectAndEliminateColors = (select: color, elim: color): void => {\n            _do('select', select)\n            _do('eliminate', elim)\n        }\n\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        selectAndEliminateColors(selectedColor, rejectedColor)\n    }\n\n    private _split(color: color): [index, bit] {\n        const [index, bit] = [color >> 5, 2 ** (color & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors = new Uint32Array(0x80000)\n\n        if (this._nextIterationColors.length < 1) {\n            throw new Error('Array is empty but should not be')\n        }\n\n        this._colors = shuffle(this._nextIterationColors) as colorsAry\n        this._nextIterationColors = []\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n\n    private _is(color: color, testingFor: 'eliminated' | 'selected'): boolean {\n        const [index, bit] = this._split(color)\n\n        const num =\n            testingFor === 'eliminated'\n                ? this.eliminatedColors[index]\n                : this.selectedColors[index]\n\n        if (num === undefined) {\n            return false\n        }\n\n        return !!(num & bit)\n    }\n}\n", "import { addEventListeners, updateGameUi, updateLogin } from './ui'\nimport { Game } from './game'\nimport { tryLocalLogin } from './auth'\nimport { User } from './user'\n\nexport interface App {\n    user?: User\n    game: Game\n}\n\nconst app: App = {\n    game: new Game(),\n}\n\naddEventListeners(app.game)\ntryLocalLogin().then(response => {\n    if (response instanceof Error || !response) {\n        return\n    }\n\n    updateLogin(response.email)\n})\n\nupdateGameUi(app.game)\n"],
  "mappings": "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",
  "names": []
}
