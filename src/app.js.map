{
  "version": 3,
  "sources": ["../scripts/user.ts", "../scripts/auth.ts", "../scripts/eventHandlers.ts", "../scripts/notification.ts", "../scripts/ui.ts", "../scripts/game.ts", "../scripts/db.ts", "../scripts/app.ts"],
  "sourcesContent": ["export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { updateLogin } from './ui'\nimport { User, getUser } from './user'\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport async function tryLogin(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('auth-with-password', data)\n\n    return await _parseResponse(response, 'record')\n}\n\nexport async function trySignup(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('records', data)\n\n    return await _parseResponse(response)\n}\n\nexport async function tryChangePw(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('request-password-reset', data)\n\n    console.log(response)\n\n    return await _parseResponse(response)\n}\n\nexport function saveAuthLocal(userId: string, email: string) {\n    localStorage.setItem('hasUserSaved', 'true')\n    localStorage.setItem('id', userId)\n    localStorage.setItem('email', email)\n}\n\nexport async function tryLocalLogin(): Promise<User | Error> {\n    if (!localStorage.getItem('hasUserSaved')) {\n        return Error('User ID is not saved locally')\n    }\n\n    updateLogin(localStorage.getItem('email') as string)\n\n    const id = localStorage.getItem('id') as string\n\n    const response = await _fetchUsers(`records/${id}`)\n\n    return await _parseResponse(response)\n}\n\nexport function clearAuthLocal() {\n    localStorage.removeItem('hasUserSaved')\n    localStorage.removeItem('id')\n    localStorage.removeItem('email')\n}\n\nasync function _parseResponse(\n    response: Response,\n    propName?: string\n): Promise<User | Error> {\n    const json = await response.json()\n\n    if (response.status != 200) {\n        return Error(json.message)\n    }\n\n    return getUser(propName ? json[propName] : json)\n}\n\nasync function _fetchUsers(path: string, data?: AuthData): Promise<Response> {\n    return await fetch(\n        `http://34.42.14.226:8090/api/collections/users/${path}`,\n        data\n    )\n}\n", "import { tryLogin, trySignup, tryChangePw, clearAuthLocal } from './auth'\nimport { User } from './user'\n\nexport async function signupOrLogin(\n    formElement: HTMLFormElement,\n    action: string\n): Promise<User | Error> {\n    const form = new FormData(formElement)\n\n    const data = {\n        method: 'post',\n        body: form,\n    } as const\n\n    if (action === 'login') {\n        return await tryLogin(data)\n    }\n\n    const email = form.get('identity') as string\n    form.set('email', email)\n    if (action === 'changepw') {\n        return await tryChangePw(data)\n    }\n\n    const pw = form.get('password') as string | null\n    if (!pw || !email) {\n        return Error(\n            'Something went wrong - please refresh the page and try again.'\n        )\n    }\n\n    form.append('passwordConfirm', pw)\n\n    return await trySignup(data)\n}\n\nexport function logout(e: PointerEvent): void {\n    console.log('logoutHandler', e)\n\n    if (e.target instanceof HTMLFormElement) {\n        e.target.reset()\n    }\n\n    clearAuthLocal()\n\n    document.querySelector('.login')!.classList.remove('hidden')\n    document.querySelector('#logout-btn')!.classList.add('hidden')\n    document.querySelector('.welcome-user')!.textContent = ''\n}\n\nexport function reset(): void {\n    console.log('resetHandler')\n}\n\nexport function selectColor(num: 1 | 2): void {\n    console.log('selectColorHandler', num)\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { clearAuthLocal, saveAuthLocal } from './auth'\nimport { signupOrLogin, logout } from './eventHandlers'\nimport { NotifyType, notify } from './notification'\nimport { Game, color } from './game'\nimport { App } from './app'\nimport { Db } from './db'\nimport { guestUser } from './user'\n\nexport const addEventListeners = (app: App, db: Db): void => {\n    document\n        .querySelector('.login')!\n        .addEventListener('submit', async (e: SubmitEvent) => {\n            const form = e.target\n\n            if (!(form instanceof HTMLFormElement)) {\n                notify(\n                    NotifyType.error,\n                    'Something went wrong - please refresh the page and try again.'\n                )\n                return\n            }\n\n            const user = await signupOrLogin(form, e.submitter?.dataset.action!)\n\n            if (user instanceof Error) {\n                notify(NotifyType.error, user.message)\n                return\n            }\n\n            app.user = user\n\n            if (_shouldSaveAuthLocal(form)) {\n                saveAuthLocal(user.id, user.email)\n            } else {\n                clearAuthLocal()\n            }\n\n            form.reset()\n            updateLogin(user.email)\n        })\n    document.querySelector('#logout-btn')!.addEventListener('click', e => {\n        logout(e as PointerEvent)\n        app.user = guestUser()\n    })\n    document\n        .querySelector('.new-colors')!\n        .addEventListener('click', async () => {\n            app.game.shuffleColors()\n            db.save(app)\n            updateGameUi(app.game)\n        })\n    document\n        .querySelector('.clear-data')!\n        .addEventListener('click', async () => {\n            app.game.reset()\n            db.save(app)\n            updateGameUi(app.game)\n        })\n    document.querySelector('#color1')!.addEventListener('click', async () => {\n        app.game.selectColor(1)\n        db.save(app)\n        updateGameUi(app.game)\n    })\n    document.querySelector('#color2')!.addEventListener('click', async () => {\n        app.game.selectColor(2)\n        db.save(app)\n        updateGameUi(app.game)\n    })\n    document.querySelector('.debug')!.addEventListener('click', () => {\n        console.log(app)\n    })\n}\n\nexport function updateLogin(user: string) {\n    document.querySelector('.login')!.classList.add('hidden')\n    document.querySelector('#logout-btn')!.classList.remove('hidden')\n    document.querySelector('.welcome-user')!.textContent = `Welcome ${user}`\n}\n\nfunction _shouldSaveAuthLocal(form: HTMLFormElement): boolean {\n    const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n    return (\n        stayLoggedInElement instanceof HTMLInputElement &&\n        stayLoggedInElement.checked\n    )\n}\n\nexport function updateGameUi(game: Game) {\n    const currenIter = document.querySelector('.current-iteration')\n    if (currenIter instanceof HTMLSpanElement) {\n        currenIter.textContent = game.currentIteration.toLocaleString()\n    }\n\n    const colorsRemaining = document.querySelector('.colors-remaining-cur-iter')\n    if (colorsRemaining instanceof HTMLSpanElement) {\n        colorsRemaining.textContent =\n            game.colorsRemainingCurrentIteration.toLocaleString()\n    }\n\n    const color1 = document.querySelector('#color1')\n    const color2 = document.querySelector('#color2')\n\n    if (color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement) {\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = intToHex(game.color1)\n            bgColor2 = intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n}\n\nfunction intToHex(num: color): string {\n    return num.toString(16).padStart(6, '0')\n}\n", "const MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\nfunction assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\nfunction assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: Uint32Array\n    selectedColors: Uint32Array\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: colorsAry\n\n    // TODO\n    // this should/could be implemented as a Uint32Array, representing a list of colors\n    // for the next iteration\n    private _nextIterationColors: color[]\n\n    private _bgJobInstant: number = 0\n\n    constructor(\n        eliminated?: ArrayBuffer,\n        selected?: ArrayBuffer,\n        colors?: ArrayBuffer,\n        props?: GameProps\n    ) {\n        if (!eliminated || !selected || !colors || !props) {\n            this._init()\n        } else {\n            this._load(eliminated, selected, colors, props)\n        }\n    }\n\n    get color1() {\n        return this._colors[this._colors.length - 1] as color\n    }\n\n    get color2() {\n        return this._colors[this._colors.length - 2] as color\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get testingProps(): [color[], color[]] {\n        return [this._colors, this._nextIterationColors]\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this._colors.slice(0, 1001))\n    }\n\n    private get _bgKey(): number {\n        this._bgJobInstant = Date.now()\n        return this._bgJobInstant\n    }\n\n    selectColor(num: 1 | 2) {\n        this._updateSelectedColors(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.push(this._colors.shift()!)\n        this._colors.push(this._colors.shift()!)\n    }\n\n    isEliminated(color: color) {\n        return this._is(color, 'eliminated')\n    }\n\n    isSelected(color: color) {\n        return this._is(color, 'selected')\n    }\n\n    private _init() {\n        this.eliminatedColors = new Uint32Array(0x80000)\n        this.selectedColors = new Uint32Array(0x80000)\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n        this._nextIterationColors = []\n\n        this._buildColors()\n    }\n\n    private _load(\n        eliminated: ArrayBuffer,\n        selected: ArrayBuffer,\n        colors: ArrayBuffer,\n        props: GameProps\n    ) {\n        this.eliminatedColors = new Uint32Array(eliminated)\n        this.selectedColors = new Uint32Array(selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const tempColors = Array.from(new Uint32Array(colors))\n        assertColorsAry(tempColors)\n        this._colors = tempColors\n\n        this._loadColors()\n    }\n\n    private _loadColors() {\n        console.log('_loadColorsBg')\n        const worker = new Worker('workers/loadColors.js')\n        const data = {\n            colors: this._colors,\n            eliminatedColors: this.eliminatedColors,\n            selectedColors: this.selectedColors,\n        }\n        worker.postMessage(data)\n        worker.addEventListener('message', msg => {\n            const [colors, nextIterationColors] = msg.data\n\n            assertColorsAry(colors)\n            assertColorsAry(nextIterationColors)\n\n            colors.push(...this._colors)\n            this._colors = colors\n\n            nextIterationColors.push(...this._nextIterationColors)\n            this._nextIterationColors = nextIterationColors\n        })\n    }\n\n    private _buildColors() {\n        this._colors = new Array() as colorsAry\n        this._get1000Colors()\n        this._buildColorsBackground()\n    }\n\n    /**\n     * This method does not validate that the colors have not been eliminated or selected\n     */\n    private _get1000Colors() {\n        for (let i = 0; i < 1000; i++) {\n            // ~~ is identical to Math.floor() but is faster\n            let color = ~~(Math.random() * MAX_COLORS)\n            assertColor(color)\n\n            this._colors.push(color)\n        }\n    }\n\n    protected _buildColorsBackground() {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/initColors.js')\n        const key = this._bgKey\n        worker.postMessage([this._colors, key])\n        worker.addEventListener('message', msg => {\n            const [colors, oldKey] = msg.data\n            if (oldKey !== key) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this._colors.splice(0, 0, ...colors)\n\n            // TODO\n            // need to handle the case where a user resets the game\n            // while the background thread is running\n\n            //colors.push(...this._colors)\n            //this._colors = colors\n        })\n    }\n\n    private _updateSelectedColors(num: 1 | 2): void {\n        const _do = (action: 'select' | 'eliminate', color: color): void => {\n            const [index, bit] = this._split(color)\n            const array =\n                action === 'select' ? 'selectedColors' : 'eliminatedColors'\n\n            assertColor(color)\n            if (action === 'select') {\n                this._nextIterationColors.push(this._colors.pop()!)\n            } else {\n                this._colors.pop()\n            }\n            this[array][index] |= bit\n        }\n\n        const selectAndEliminateColors = (select: color, elim: color): void => {\n            _do('select', select)\n            _do('eliminate', elim)\n        }\n\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        selectAndEliminateColors(selectedColor, rejectedColor)\n    }\n\n    private _split(color: color): [index, bit] {\n        const [index, bit] = [color >> 5, 2 ** (color & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors = new Uint32Array(0x80000)\n\n        const numColorsRemaining = this._nextIterationColors.length\n\n        if (numColorsRemaining < 1) {\n            throw new Error('Array is empty but should not be')\n        } else if (numColorsRemaining === 1) {\n            this._nextIterationColors.push(this._nextIterationColors[0]!)\n        }\n\n        const ary = shuffle(this._nextIterationColors)\n        assertColorsAry(ary)\n        this._colors = ary\n        this._nextIterationColors = []\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n\n    private _is(color: color, testingFor: 'eliminated' | 'selected'): boolean {\n        const [index, bit] = this._split(color)\n\n        const num =\n            testingFor === 'eliminated'\n                ? this.eliminatedColors[index]\n                : this.selectedColors[index]\n\n        if (num === undefined) {\n            return false\n        }\n\n        return !!(num & bit)\n    }\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\ninterface AppWithUser {\n    user: User\n    game: Game\n}\n\nfunction assertUser(app: App): asserts app is AppWithUser {\n    if (!app.user) {\n        return\n    }\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    async save(app: App): Promise<boolean> {\n        if (app.user.id === 'guest') {\n            return false\n        }\n\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n        assertUser(app)\n\n        const game = await this._getGameIfOneExists(app.user.id)\n        console.log(game)\n\n        const rv = await this._createOrUpdate(app, game?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(app: App) {\n        if (app.user.id === 'guest') {\n            return\n        }\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        if (!game) {\n            return\n        }\n\n        const [eliminatedColors, selectedColors, colors] = await this._getFiles(\n            game\n        )\n\n        if (!eliminatedColors || !selectedColors || !colors) {\n            return\n        }\n\n        app.game = new Game(\n            eliminatedColors,\n            selectedColors,\n            colors,\n            game.properties\n        )\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(\n        app: AppWithUser,\n        gameId?: string\n    ): Promise<boolean> {\n        const form = this._buildForm(app)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n        return true\n    }\n\n    private _buildForm(app: AppWithUser): FormData {\n        const elimColorBlob = new Blob([app.game.eliminatedColors])\n        const selectColorBlob = new Blob([app.game.selectedColors])\n        const colorsBlob = new Blob([app.game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(app.game.properties))\n        form.set('user', app.user.id)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: game.properties,\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n                colors: game.colors,\n            }\n        } catch (error) {\n            console.log(error)\n\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "import { addEventListeners, updateGameUi, updateLogin } from './ui'\nimport { Game } from './game'\nimport { tryLocalLogin } from './auth'\nimport { User, guestUser } from './user'\nimport { Db } from './db'\n\nexport interface App {\n    user: User\n    game: Game\n}\n\nconst app: App = {\n    game: new Game(),\n    user: guestUser(),\n}\n\nconst db = new Db('http', '34.42.14.226', '8090')\n\naddEventListeners(app, db)\ntryLocalLogin().then(response => {\n    if (response instanceof Error || !response) {\n        updateGameUi(app.game)\n        return\n    }\n\n    app.user = response\n    db.load(app).then(() => updateGameUi(app.game))\n    updateLogin(response.email)\n})\n"],
  "mappings": "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",
  "names": ["app", "db", "app"]
}
