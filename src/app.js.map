{
  "version": 3,
  "sources": ["../scripts/user.ts", "../scripts/auth.ts", "../scripts/eventHandlers.ts", "../scripts/notification.ts", "../scripts/ui.ts", "../scripts/condensedColors.ts", "../scripts/colors.ts", "../scripts/game.ts", "../scripts/db.ts", "../scripts/app.ts"],
  "sourcesContent": ["export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { updateLogin } from './ui'\nimport { User, getUser } from './user'\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport async function tryLogin(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('auth-with-password', data)\n\n    return await _parseResponse(response, 'record')\n}\n\nexport async function trySignup(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('records', data)\n\n    return await _parseResponse(response)\n}\n\nexport async function tryChangePw(data: AuthData): Promise<User | Error> {\n    const response = await _fetchUsers('request-password-reset', data)\n\n    console.log(response)\n\n    return await _parseResponse(response)\n}\n\nexport function saveAuthLocal(userId: string, email: string) {\n    localStorage.setItem('hasUserSaved', 'true')\n    localStorage.setItem('id', userId)\n    localStorage.setItem('email', email)\n}\n\nexport async function tryLocalLogin(): Promise<User | Error> {\n    if (!localStorage.getItem('hasUserSaved')) {\n        return Error('User ID is not saved locally')\n    }\n\n    updateLogin(localStorage.getItem('email') as string)\n\n    const id = localStorage.getItem('id') as string\n\n    const response = await _fetchUsers(`records/${id}`)\n\n    return await _parseResponse(response)\n}\n\nexport function clearAuthLocal() {\n    localStorage.removeItem('hasUserSaved')\n    localStorage.removeItem('id')\n    localStorage.removeItem('email')\n}\n\nasync function _parseResponse(\n    response: Response,\n    propName?: string\n): Promise<User | Error> {\n    const json = await response.json()\n\n    if (response.status != 200) {\n        return Error(json.message)\n    }\n\n    return getUser(propName ? json[propName] : json)\n}\n\nasync function _fetchUsers(path: string, data?: AuthData): Promise<Response> {\n    return await fetch(\n        `http://34.42.14.226:8090/api/collections/users/${path}`,\n        data\n    )\n}\n", "import { tryLogin, trySignup, tryChangePw, clearAuthLocal } from './auth'\nimport { User } from './user'\n\nexport async function signupOrLogin(\n    formElement: HTMLFormElement,\n    action: string\n): Promise<User | Error> {\n    const form = new FormData(formElement)\n\n    const data = {\n        method: 'post',\n        body: form,\n    } as const\n\n    if (action === 'login') {\n        return await tryLogin(data)\n    }\n\n    const email = form.get('identity') as string\n    form.set('email', email)\n    if (action === 'changepw') {\n        return await tryChangePw(data)\n    }\n\n    const pw = form.get('password') as string | null\n    if (!pw || !email) {\n        return Error(\n            'Something went wrong - please refresh the page and try again.'\n        )\n    }\n\n    form.append('passwordConfirm', pw)\n\n    return await trySignup(data)\n}\n\nexport function logout(e: PointerEvent): void {\n    console.log('logoutHandler', e)\n\n    if (e.target instanceof HTMLFormElement) {\n        e.target.reset()\n    }\n\n    clearAuthLocal()\n\n    document.querySelector('.login')!.classList.remove('hidden')\n    document.querySelector('#logout-btn')!.classList.add('hidden')\n    document.querySelector('.welcome-user')!.textContent = ''\n}\n\nexport function reset(): void {\n    console.log('resetHandler')\n}\n\nexport function selectColor(num: 1 | 2): void {\n    console.log('selectColorHandler', num)\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { clearAuthLocal, saveAuthLocal } from './auth'\nimport { signupOrLogin, logout } from './eventHandlers'\nimport { NotifyType, notify } from './notification'\nimport { Game, color } from './game'\nimport { App } from './app'\nimport { Db } from './db'\nimport { guestUser } from './user'\n\nexport const addEventListeners = (app: App, db: Db): void => {\n    document\n        .querySelector('.login')!\n        .addEventListener('submit', async (e: SubmitEvent) => {\n            const form = e.target\n\n            if (!(form instanceof HTMLFormElement)) {\n                notify(\n                    NotifyType.error,\n                    'Something went wrong - please refresh the page and try again.'\n                )\n                return\n            }\n\n            const user = await signupOrLogin(form, e.submitter?.dataset.action!)\n\n            if (user instanceof Error) {\n                notify(NotifyType.error, user.message)\n                return\n            }\n\n            app.user = user\n\n            if (_shouldSaveAuthLocal(form)) {\n                saveAuthLocal(user.id, user.email)\n            } else {\n                clearAuthLocal()\n            }\n\n            form.reset()\n            updateLogin(user.email)\n        })\n    document.querySelector('#logout-btn')!.addEventListener('click', e => {\n        logout(e as PointerEvent)\n        app.user = guestUser()\n    })\n    document\n        .querySelector('.new-colors')!\n        .addEventListener('click', async () => {\n            app.game.shuffleColors()\n            db.save(app)\n            updateGameUi(app.game)\n        })\n    document\n        .querySelector('.clear-data')!\n        .addEventListener('click', async () => {\n            app.game.reset()\n            db.save(app)\n            updateGameUi(app.game)\n        })\n    document.querySelector('#color1')!.addEventListener('click', async () => {\n        app.game.selectColor(1)\n        db.save(app)\n        updateGameUi(app.game)\n    })\n    document.querySelector('#color2')!.addEventListener('click', async () => {\n        app.game.selectColor(2)\n        db.save(app)\n        updateGameUi(app.game)\n    })\n    document.querySelector('.debug')!.addEventListener('click', () => {\n        console.log(app)\n    })\n}\n\nexport function updateLogin(user: string) {\n    document.querySelector('.login')!.classList.add('hidden')\n    document.querySelector('#logout-btn')!.classList.remove('hidden')\n    document.querySelector('.welcome-user')!.textContent = `Welcome ${user}`\n}\n\nexport function updateGameUi(game: Game) {\n    const currenIter = document.querySelector('.current-iteration')\n    if (currenIter instanceof HTMLSpanElement) {\n        currenIter.textContent = game.currentIteration.toLocaleString()\n    }\n\n    const colorsRemaining = document.querySelector('.colors-remaining-cur-iter')\n    if (colorsRemaining instanceof HTMLSpanElement) {\n        colorsRemaining.textContent =\n            game.colorsRemainingCurrentIteration.toLocaleString()\n    }\n\n    const color1 = document.querySelector('#color1')\n    const color2 = document.querySelector('#color2')\n\n    if (color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement) {\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = intToHex(game.color1)\n            bgColor2 = intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n}\n\nfunction intToHex(num: color): string {\n    return num.toString(16).padStart(6, '0')\n}\n", "import type { color } from './game'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error('Value is undefined but should not be')\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n", "import { color, colorsAry } from './game'\nimport { CondensedColors } from './condensedColors'\n\nconst MAX_COLORS = 0x1000000\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    private static bgKey: number\n\n    constructor() {\n        this.init()\n    }\n\n    get color1(): color {\n        return this.getAndValidateColor(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidateColor(2)\n    }\n\n    private getAndValidateColor(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this.ary.slice(0, 1001))\n    }\n\n    shuffle(): void {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     *\n     * @param num Updates ary, ensuring that there are always >= 2 elements\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedAndRejectedColors = this.getSelectedAndRejected(num)\n        this.selectColor(selectedAndRejectedColors[0])\n\n        // if there were more than two colors left before making a selection\n        if (this.ary.length > 2) {\n            this.pop2()\n        } else {\n            // else, those were the last two colors and we need to reset\n            this.validateAry()\n\n            if (this.favoriteColorFound()) {\n                this.selectedColors.push(this.selectedColors[0]!)\n            }\n\n            this.reset(shuffle(this.selectedColors))\n            this.selectedColors = []\n        }\n\n        return selectedAndRejectedColors\n    }\n\n    private getSelectedAndRejected(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n        return [selectedColor, rejectedColor]\n    }\n\n    private selectColor(color: color): void {\n        this.selectedColors.push(color)\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    private favoriteColorFound(): boolean {\n        return this.selectedColors.length === 1\n    }\n\n    static load(data: ColorsLoadData): Colors {\n        const c = new Colors()\n        c.load(data)\n        return c\n    }\n\n    private reset(newAry: color[]): void {\n        assertColorsAry(newAry)\n        this.ary = newAry\n    }\n\n    private get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n\n    private pop2(): void {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    private load(data: ColorsLoadData) {\n        // first 1000\n        this.ary = ColorsAry.from(data.next1000)\n\n        // background\n        this.loadBg({ eliminated: data.eliminated, selected: data.selected })\n    }\n\n    private loadBg(data: { eliminated: ArrayBuffer; selected: ArrayBuffer }) {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/loadColors.js')\n        worker.postMessage([this.ary, data, this.reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n            if (oldKey !== Colors.bgKey) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        })\n    }\n\n    private init() {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n        this.first1000()\n        this.background()\n    }\n\n    private first1000(): void {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected background(): void {\n        console.log('_buildColorsBg')\n        const worker = new Worker('workers/initColors.js')\n        worker.postMessage([this.ary, this.reloadBgKey])\n        worker.addEventListener('message', msg => {\n            const [colors, oldKey] = msg.data\n            if (oldKey !== Colors.bgKey) {\n                return\n            }\n            console.log(colors)\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n        })\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData } from './colors'\n\nexport const MAX_COLORS = 0x1000000\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nexport class Game {\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    private _bgJobInstant: number = 0\n\n    constructor(\n        eliminated?: ArrayBuffer,\n        selected?: ArrayBuffer,\n        colors?: ArrayBuffer,\n        props?: GameProps\n    ) {\n        if (!eliminated || !selected || !colors || !props) {\n            this._init()\n        } else {\n            this._load(eliminated, selected, colors, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor(): color | null {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    private get _reloadBgKey(): number {\n        this._bgJobInstant = Date.now()\n        return this._getBgKey\n    }\n\n    private get _getBgKey(): number {\n        return this._bgJobInstant\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(\n        eliminated: ArrayBuffer,\n        selected: ArrayBuffer,\n        colors: ArrayBuffer,\n        props: GameProps\n    ) {\n        this.eliminatedColors = new CondensedColors(eliminated)\n        this.selectedColors = new CondensedColors(selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: colors,\n            eliminated,\n            selected,\n        }\n\n        this._loadColors(data)\n    }\n\n    private _loadColors(data: ColorsLoadData) {\n        this._colors = Colors.load(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors() {\n        this._colors = new Colors()\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    async save(app: App): Promise<boolean> {\n        if (app.user.id === 'guest') {\n            return false\n        }\n\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n\n        const game = await this._getGameIfOneExists(app.user.id)\n        console.log(game)\n\n        const rv = await this._createOrUpdate(app, game?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(app: App) {\n        if (app.user.id === 'guest') {\n            return\n        }\n\n        const game = await this._getGameIfOneExists(app.user.id)\n\n        if (!game) {\n            return\n        }\n\n        const [eliminatedColors, selectedColors, colors] = await this._getFiles(\n            game\n        )\n\n        if (!eliminatedColors || !selectedColors || !colors) {\n            return\n        }\n\n        app.game = new Game(\n            eliminatedColors,\n            selectedColors,\n            colors,\n            game.properties\n        )\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(app: App, gameId?: string): Promise<boolean> {\n        const form = this._buildForm(app)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n        return true\n    }\n\n    private _buildForm(app: App): FormData {\n        const elimColorBlob = app.game.eliminatedColors.blob\n        const selectColorBlob = app.game.selectedColors.blob\n        const colorsBlob = new Blob([app.game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(app.game.properties))\n        form.set('user', app.user.id)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: game.properties,\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n                colors: game.colors,\n            }\n        } catch (error) {\n            console.log(error)\n\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "import { updateGameUi, updateLogin } from './ui'\nimport { Game } from './game'\nimport { clearAuthLocal, saveAuthLocal, tryLocalLogin } from './auth'\nimport { User, guestUser } from './user'\nimport { Db } from './db'\nimport { NotifyType, notify } from './notification'\nimport { logout, signupOrLogin } from './eventHandlers'\n\nfunction assertType<T>(\n    elem: any,\n    cls: new (...a: any) => T\n): asserts elem is T {\n    if (!(elem instanceof cls)) {\n        notify(\n            NotifyType.error,\n            'Something went wrong - please refresh the page and try again.'\n        )\n        throw new TypeError('Element is not an instance of ' + cls)\n    }\n}\n\nfunction getAndAssertType<T>(selector: string, cls: new (...a: any) => T): T {\n    const elem = document.querySelector(selector)\n    assertType(elem, cls)\n    return elem\n}\n\nfunction getButton(selector: string): HTMLButtonElement {\n    return getAndAssertType(selector, HTMLButtonElement)\n}\n\nexport class App {\n    private _user: User\n    private _game: Game\n    private db: Db\n\n    private static isInternal: boolean = false\n\n    constructor() {\n        if (!App.isInternal) {\n            throw new TypeError('App is not constructable.')\n        }\n        this._user = guestUser()\n        this._game = new Game()\n        this.db = new Db('http', '34.42.14.226', '8090')\n\n        App.isInternal = false\n    }\n\n    static start() {\n        App.isInternal = true\n        const app = new App()\n        app.addEventListeners()\n        tryLocalLogin().then(response => {\n            if (response instanceof Error || !response) {\n                updateGameUi(app.game)\n                return\n            }\n\n            app._user = response\n            app.db.load(app).then(() => updateGameUi(app.game))\n            updateLogin(response.email)\n        })\n    }\n\n    get user(): User {\n        return this._user\n    }\n\n    get game() {\n        return this._game\n    }\n\n    set game(game: Game) {\n        this._game = game\n    }\n\n    private addEventListeners() {\n        this.addAuthEventListeners()\n        this.addGameEventListeners()\n    }\n\n    private addAuthEventListeners() {\n        this.addLoginEventListener()\n        this.addLogoutEventListener()\n    }\n\n    private addLoginEventListener() {\n        function _shouldSaveAuthLocal(form: HTMLFormElement): boolean {\n            const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n            return (\n                stayLoggedInElement instanceof HTMLInputElement &&\n                stayLoggedInElement.checked\n            )\n        }\n\n        getAndAssertType('.login', HTMLFormElement).onsubmit = async (\n            e: SubmitEvent\n        ) => {\n            const form = e.target\n            assertType(form, HTMLFormElement)\n\n            const user = await signupOrLogin(form, e.submitter?.dataset.action!)\n\n            if (user instanceof Error) {\n                notify(NotifyType.error, user.message)\n                return\n            }\n\n            this._user = user\n\n            if (_shouldSaveAuthLocal(form)) {\n                saveAuthLocal(user.id, user.email)\n            } else {\n                clearAuthLocal()\n            }\n\n            form.reset()\n            updateLogin(user.email)\n        }\n    }\n\n    private addLogoutEventListener() {\n        getAndAssertType('#logout-btn', HTMLInputElement).onclick = e => {\n            logout(e as PointerEvent)\n            this._user = guestUser()\n        }\n    }\n\n    private addGameEventListeners() {\n        this.addShuffleEventListener()\n        this.addClearEventListener()\n        this.addColorEventListener()\n    }\n\n    private addShuffleEventListener() {\n        getButton('.new-colors').onclick = async () => {\n            this.game.shuffleColors()\n            this.saveGameAndUpdate()\n        }\n    }\n    private addClearEventListener() {\n        getButton('.clear-data').onclick = async () => {\n            this.game.reset()\n            this.saveGameAndUpdate()\n        }\n    }\n\n    private addColorEventListener() {\n        const clickColor = async (num: 1 | 2) => {\n            this.game.selectColor(num)\n            this.saveGameAndUpdate()\n        }\n\n        getAndAssertType('#color1', HTMLDivElement).onclick = async () =>\n            await clickColor(1)\n        getAndAssertType('#color2', HTMLDivElement).onclick = async () =>\n            await clickColor(2)\n    }\n\n    private saveGameAndUpdate() {\n        this.db.save(this)\n        updateGameUi(this.game)\n    }\n}\n\nApp.start()\n"],
  "mappings": "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",
  "names": ["MAX_COLORS", "MAX_COLORS", "_shouldSaveAuthLocal"]
}
