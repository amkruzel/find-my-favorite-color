{
  "version": 3,
  "sources": ["../../scripts/workers/buildShuffledColors.ts"],
  "sourcesContent": ["const MAX_COLORS = 0x1000000\n\nself.onmessage = message => {\n    console.log('starting from worker thread')\n\n    const { eliminatedColors, selectedColors, colors, nextIterationColors } =\n        message.data\n\n    const returnArys = buildShuffledArray(\n        eliminatedColors,\n        selectedColors,\n        colors,\n        nextIterationColors\n    )\n    console.log('completed from worker thread - now returning')\n\n    self.postMessage(returnArys)\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n\nfunction contains(ary: Uint32Array, val: number): boolean {\n    const [index, bit] = [val >> 5, 2 ** (val & 31)]\n    const num = ary[index] ?? 0\n    return !!(num & bit)\n}\n\nfunction buildShuffledArray(\n    eliminatedColors: Uint32Array,\n    selectedColors: Uint32Array,\n    colors: number[],\n    nextIterationColors: number[]\n): [number[], number[]] {\n    const newColors: number[] = []\n    const newNextIterationColors: number[] = []\n    for (let color = 0; color < MAX_COLORS; color++) {\n        if (color % 100000 === 0) {\n            console.log('i: ', color)\n        }\n        if (contains(eliminatedColors, color)) {\n            continue\n        }\n\n        if (contains(selectedColors, color)) {\n            if (!nextIterationColors.includes(color)) {\n                newNextIterationColors.push(color)\n            }\n            continue\n        }\n\n        if (!colors.includes(color)) {\n            newColors.push(color)\n        }\n    }\n    return [newColors, newNextIterationColors]\n}\n"],
  "mappings": ";;;AAAA,MAAM,aAAa;AAEnB,OAAK,YAAY,aAAW;AACxB,YAAQ,IAAI,6BAA6B;AAEzC,UAAM,EAAE,kBAAkB,gBAAgB,QAAQ,oBAAoB,IAClE,QAAQ;AAEZ,UAAM,aAAa;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,YAAQ,IAAI,8CAA8C;AAE1D,SAAK,YAAY,UAAU;AAAA,EAC/B;AAsBA,WAAS,SAAS,KAAkB,KAAsB;AACtD,UAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,MAAM,MAAM,GAAG;AAC/C,UAAM,MAAM,IAAI,KAAK,KAAK;AAC1B,WAAO,CAAC,EAAE,MAAM;AAAA,EACpB;AAEA,WAAS,mBACL,kBACA,gBACA,QACA,qBACoB;AACpB,UAAM,YAAsB,CAAC;AAC7B,UAAM,yBAAmC,CAAC;AAC1C,aAAS,QAAQ,GAAG,QAAQ,YAAY,SAAS;AAC7C,UAAI,QAAQ,QAAW,GAAG;AACtB,gBAAQ,IAAI,OAAO,KAAK;AAAA,MAC5B;AACA,UAAI,SAAS,kBAAkB,KAAK,GAAG;AACnC;AAAA,MACJ;AAEA,UAAI,SAAS,gBAAgB,KAAK,GAAG;AACjC,YAAI,CAAC,oBAAoB,SAAS,KAAK,GAAG;AACtC,iCAAuB,KAAK,KAAK;AAAA,QACrC;AACA;AAAA,MACJ;AAEA,UAAI,CAAC,OAAO,SAAS,KAAK,GAAG;AACzB,kBAAU,KAAK,KAAK;AAAA,MACxB;AAAA,IACJ;AACA,WAAO,CAAC,WAAW,sBAAsB;AAAA,EAC7C;",
  "names": []
}
