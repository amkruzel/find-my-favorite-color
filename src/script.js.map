{
  "version": 3,
  "sources": ["../scripts/ui/uielement.ts", "../scripts/ui/ui.ts", "../scripts/condensedColors.ts", "../scripts/utils/utils.ts", "../scripts/colors.ts", "../scripts/game.ts", "../scripts/user.ts", "../scripts/auth.ts", "../scripts/db.ts", "../scripts/notification.ts", "../scripts/app.ts", "../scripts/script.ts"],
  "sourcesContent": ["export class UiElement {\n    private _value: Element\n\n    constructor(selector?: string) {\n        if (!selector) {\n            throw new TypeError('UIElement constructor selector was undefined')\n        }\n\n        const val = document.querySelector(selector)\n\n        this.assertType(val)\n\n        this._value = val\n    }\n\n    private assertType(el: Element | null): asserts el is Element {\n        if (el === null || !(el instanceof Element)) {\n            throw new TypeError('Invalid selector.')\n        }\n    }\n\n    public addEventListener(\n        type: string,\n        event: EventListenerOrEventListenerObject,\n        options?: Object\n    ) {\n        this._value.addEventListener(type, event, options)\n    }\n}\n", "import { Game } from 'scripts/game'\nimport { UiElement } from './uielement'\nimport { User } from 'scripts/user'\nimport { App } from 'scripts/app'\n\nexport class Ui {\n    private elements: Map<string, UiElement>\n\n    constructor(elems?: string[], names?: string[]) {\n        this.elements = new Map()\n\n        if (!elems) {\n            return\n        }\n\n        if (!names) {\n            names = elems\n        }\n\n        for (let i = 0; i < elems.length; i++) {\n            const selector = elems[i]\n            const name = names[i]\n\n            if (!selector || !name) {\n                return\n            }\n\n            if (!this.add(selector, name)) {\n                return\n            }\n        }\n    }\n\n    /**\n     * Attempts to add an element to the Ui. If there is already a value with\n     * the given name, it is not overwritten (the new element is not added).\n     * @param elem\n     * @returns true if the element is added\n     */\n    add(\n        descriptor: string,\n        name: string = descriptor,\n        event?: string,\n        handler?: EventListenerOrEventListenerObject\n    ): boolean {\n        if (this.elements.has(name)) {\n            return false\n        }\n\n        this.elements.set(name, new UiElement(descriptor))\n\n        if (event && handler) {\n            this.get(name)?.addEventListener(event, handler)\n        }\n\n        return true\n    }\n\n    get(name: string) {\n        return this.elements.get(name)\n    }\n\n    static updateAll(app: App) {\n        Ui.updateAuth(app.user)\n        Ui.updateGame(app.game)\n    }\n\n    static updateAuth(user: User | string) {\n        const name = typeof user === 'string' ? user : user.email\n\n        const loginClasses = document.querySelector('.login')!.classList\n        const logoutClasses = document.querySelector('#logout-btn')!.classList\n        const welcomeContainerClasses =\n            document.querySelector('.welcome-container')!.classList\n        const welcomeMessage = document.querySelector('.welcome-user')!\n\n        if (!name) {\n            loginClasses.remove('hidden')\n            logoutClasses.add('hidden')\n            welcomeContainerClasses.add('hidden')\n            welcomeMessage.textContent = ''\n\n            return\n        }\n\n        loginClasses.add('hidden')\n        logoutClasses.remove('hidden')\n        welcomeContainerClasses.remove('hidden')\n        welcomeMessage.textContent = `Welcome, ${name}`\n    }\n\n    static updateGame(game: Game) {\n        Ui.tryUpdateCurIter(game)\n        Ui.tryUpdateColorsRemaining(game)\n        Ui.tryUpdateColors(game)\n    }\n\n    private static tryUpdateCurIter(game: Game) {\n        const currenIter = document.querySelector('.current-iteration')\n        if (currenIter instanceof HTMLSpanElement) {\n            currenIter.textContent = game.currentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColorsRemaining(game: Game) {\n        const colorsRemaining = document.querySelector(\n            '.colors-remaining-cur-iter'\n        )\n        if (colorsRemaining instanceof HTMLSpanElement) {\n            colorsRemaining.textContent =\n                game.colorsRemainingCurrentIteration.toLocaleString()\n        }\n    }\n\n    private static tryUpdateColors(game: Game) {\n        const color1 = document.querySelector('#color1')\n        const color2 = document.querySelector('#color2')\n\n        const colorsExist =\n            color1 instanceof HTMLDivElement && color2 instanceof HTMLDivElement\n\n        if (!colorsExist) {\n            return\n        }\n\n        let bgColor1: string, bgColor2: string\n\n        if (game.favoriteColor) {\n            bgColor1 = bgColor2 = Ui.intToHex(game.favoriteColor)\n        } else {\n            bgColor1 = Ui.intToHex(game.color1)\n            bgColor2 = Ui.intToHex(game.color2)\n        }\n\n        color1.style.backgroundColor = `#${bgColor1}`\n        color2.style.backgroundColor = `#${bgColor2}`\n    }\n\n    private static intToHex(num: number) {\n        return num.toString(16).padStart(6, '0')\n    }\n}\n", "import type { color } from './colors'\n\ntype index = number & { __type: index }\ntype bit = number & { __type: bit }\n\n/**\n * This class represents a Uint32Array of length 0x80000\n * each bit in each 32 bit number can be used as a flag,\n * such as checking if a color is eliminated or not\n */\nexport class CondensedColors {\n    protected ary: Uint32Array\n\n    constructor(vals?: ArrayBuffer) {\n        this.init(vals)\n    }\n\n    get blob(): Blob {\n        return new Blob([this.ary])\n    }\n\n    has(val: color): boolean {\n        const [index, bit] = this.split(val)\n        const num = this.get(index)\n        return !!(num & bit)\n    }\n\n    add(val: color): void {\n        const [index, bit] = this.split(val)\n        this.ary[index] |= bit\n    }\n\n    reset(): void {\n        this.init()\n    }\n\n    private split(val: color): [index, bit] {\n        const [index, bit] = [val >> 5, 2 ** (val & 31)]\n        assertIndex(index)\n        assertBit(bit)\n        return [index, bit]\n    }\n\n    private get(val: index): number {\n        const num = this.ary[val]\n\n        if (num === undefined) {\n            throw new Error('Value is undefined but should not be')\n        }\n\n        return num\n    }\n\n    private init(vals?: ArrayBuffer) {\n        if (vals) {\n            this.ary = new Uint32Array(vals)\n        } else {\n            this.ary = new Uint32Array(0x80000)\n        }\n    }\n}\n\nfunction assertIndex(value: number): asserts value is index {\n    if (parseInt(`${value}`) !== value || value < 0 || value >= 0x80000) {\n        throw new Error('Not an index!')\n    }\n}\n\nfunction assertBit(value: number): asserts value is bit {\n    if (parseInt(`${value}`) !== value || value < 0 || value & (value - 1)) {\n        throw new Error('Not a bit!')\n    }\n}\n", "// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n        // Pick a remaining element...\n        let randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n\n        // And swap it with the current element.\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ] as [T, T]\n    }\n\n    return array\n}\n", "import { Game } from './game'\nimport { shuffle } from './utils/utils'\n\nexport type color = number & { __type: color }\nexport type colorsAry = [color, color, ...color[]]\n\nexport interface ColorsLoadData {\n    next1000: ArrayBuffer\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n}\n\nclass ColorsAry {\n    static new(): colorsAry {\n        return new Array() as colorsAry\n    }\n\n    static from(ary: ArrayBuffer): colorsAry {\n        const tmp = Array.from(new Uint32Array(ary))\n        assertColorsAry(tmp)\n        return tmp\n    }\n}\n\nexport class Colors {\n    protected selectedColors: color[]\n    protected ary: colorsAry\n    private static bgKey: number\n\n    constructor(data?: ColorsLoadData) {\n        this.init(data)\n    }\n\n    private init(data?: ColorsLoadData) {\n        this.ary = ColorsAry.new()\n        this.selectedColors = Array()\n\n        if (data) {\n            this.ary = ColorsAry.from(data.next1000)\n        } else {\n            this.first1000()\n        }\n\n        this.bg(data)\n    }\n\n    private first1000() {\n        for (let i = 0; i < 1000; i++) {\n            let color: number\n\n            do {\n                // ~~ is identical to Math.floor() but is faster\n                color = ~~(Math.random() * Game.MAX_COLORS)\n                assertColor(color)\n            } while (this.ary.includes(color))\n\n            this.ary.push(color)\n        }\n        assertColorsAry(this.ary)\n    }\n\n    protected bg(\n        data: { eliminated: ArrayBuffer; selected: ArrayBuffer } | null = null\n    ) {\n        const worker = new Worker('workers/colors.js')\n        worker.postMessage([[this.ary, data], this.reloadBgKey])\n\n        worker.onmessage = msg => {\n            const [[colors, selectedColors], oldKey] = msg.data\n\n            if (this.isInvalid(oldKey)) {\n                return\n            }\n\n            assertColorsAry(colors)\n            this.ary.splice(0, 0, ...colors)\n\n            if (selectedColors?.length !== 0) {\n                this.selectedColors.splice(0, 0, ...selectedColors)\n            }\n        }\n    }\n\n    private isInvalid(key: any) {\n        return typeof key !== 'number' || key !== Colors.bgKey\n    }\n\n    get color1(): color {\n        return this.getAndValidate(1)\n    }\n\n    get color2(): color {\n        return this.getAndValidate(2)\n    }\n\n    private getAndValidate(num: 1 | 2): color {\n        const c = this.ary[this.ary.length - num]\n        assertDefined(c)\n        return c\n    }\n\n    get next1000Colors(): Uint32Array {\n        return new Uint32Array(this.ary.slice(0, 1001))\n    }\n\n    shuffle() {\n        const c1 = this.ary.shift()\n        const c2 = this.ary.shift()\n\n        assertDefined(c1)\n        assertDefined(c2)\n\n        this.ary.push(c1, c2)\n    }\n\n    /**\n     * Updates ary, ensuring that there are always >= 2 elements.\n     * If this.ary.length == 2 at the beginning of the method, then both elements\n     * will be the same at the end - the selected color.\n     * @return the colors in the format `[selected, rejected]`\n     */\n    select(num: 1 | 2): [color, color] {\n        const selectedColor = num === 1 ? this.color1 : this.color2\n        const rejectedColor = num === 1 ? this.color2 : this.color1\n\n        this.selectedColors.push(selectedColor)\n\n        const moreThan2ColorsRemaining = this.ary.length > 2\n\n        if (moreThan2ColorsRemaining) {\n            this.pop2()\n        } else {\n            this.resetAry()\n        }\n\n        return [selectedColor, rejectedColor]\n    }\n\n    private pop2() {\n        this.ary.splice(this.ary.length - 2, 2)\n    }\n\n    private resetAry() {\n        this.validateAry()\n\n        const favoriteColorFound = this.selectedColors.length === 1\n\n        if (favoriteColorFound) {\n            this.selectedColors.push(this.selectedColors[0]!) // must be defined because we just pushed a value\n        }\n\n        this.reset()\n    }\n\n    private validateAry(): void {\n        if (this.ary.length !== 2) {\n            throw new Error('Array is the incorrect length')\n        }\n    }\n\n    /**\n     * Shuffles `this.selectedColors`, asserts that is is a `colorsAry`,\n     * sets `this.ary = <the shuffled ary>`, and clears `this.selectedColors`\n     */\n    private reset() {\n        const newAry = shuffle(this.selectedColors)\n        assertColorsAry(newAry)\n        this.ary = newAry\n        this.selectedColors = []\n    }\n\n    private get reloadBgKey(): number {\n        Colors.bgKey = Date.now()\n        return Colors.bgKey\n    }\n}\n\nexport function assertColor(value: number): asserts value is color {\n    if (parseInt(`${value}`) !== value || value < 0 || value > 0xffffff) {\n        throw new Error(value + 'is not a color!')\n    }\n}\n\nexport function assertColorsAry(ary: number[]): asserts ary is colorsAry {\n    if (\n        !ary.every(elem => {\n            assertColor(elem)\n            return true\n        }) ||\n        ary.length < 2\n    ) {\n        console.log(ary)\n        throw new Error('Not a colorsAry!')\n    }\n}\n\nfunction assertDefined(val: color | undefined): asserts val is color {\n    if (val === undefined) {\n        throw new Error('Value is undefined!')\n    }\n}\n", "import { CondensedColors } from './condensedColors'\nimport { Colors, ColorsLoadData, color } from './colors'\n\nexport interface GameProps {\n    favoriteColorFound: boolean\n    currentIteration: number\n    colorsRemainingCurrentIteration: number\n}\n\ninterface GameLoadArys {\n    eliminated: ArrayBuffer\n    selected: ArrayBuffer\n    colors: ArrayBuffer\n}\n\nexport class Game {\n    static MAX_COLORS = 0x1000000\n\n    eliminatedColors: CondensedColors\n    selectedColors: CondensedColors\n    private _favoriteColorFound: boolean\n    private _currentIteration: number\n    private _colorsRemainingCurrentIteration: number\n    _colors: Colors\n\n    constructor(arys?: GameLoadArys, props?: GameProps) {\n        if (!arys || !props) {\n            this._init()\n        } else {\n            this._load(arys, props)\n        }\n    }\n\n    get color1() {\n        return this._colors.color1\n    }\n\n    get color2() {\n        return this._colors.color2\n    }\n\n    get currentIteration() {\n        return this._currentIteration\n    }\n\n    get colorsRemainingCurrentIteration() {\n        return this._colorsRemainingCurrentIteration\n    }\n\n    get favoriteColor() {\n        return this._favoriteColorFound ? this.color1 : null\n    }\n\n    get properties(): GameProps {\n        return {\n            favoriteColorFound: this.favoriteColor !== null,\n            currentIteration: this.currentIteration,\n            colorsRemainingCurrentIteration:\n                this.colorsRemainingCurrentIteration,\n        }\n    }\n\n    get next1000Colors(): Uint32Array {\n        return this._colors.next1000Colors\n    }\n\n    selectColor(num: 1 | 2) {\n        this._select(num)\n        this._colorsRemainingCurrentIteration -= 2\n        this._checkForNewIteration()\n        this._checkForFavoriteColor()\n    }\n\n    reset() {\n        this._init()\n    }\n\n    shuffleColors() {\n        this._colors.shuffle()\n    }\n\n    isEliminated(color: color) {\n        return this.eliminatedColors.has(color)\n    }\n\n    isSelected(color: color) {\n        return this.selectedColors.has(color)\n    }\n\n    protected _init() {\n        this.eliminatedColors = new CondensedColors()\n        this.selectedColors = new CondensedColors()\n        this._currentIteration = 1\n        this._colorsRemainingCurrentIteration = Game.MAX_COLORS\n        this._favoriteColorFound = false\n\n        this._buildColors()\n    }\n\n    private _load(arys: GameLoadArys, props: GameProps) {\n        this.eliminatedColors = new CondensedColors(arys.eliminated)\n        this.selectedColors = new CondensedColors(arys.selected)\n        this._currentIteration = props.currentIteration\n        this._colorsRemainingCurrentIteration =\n            props.colorsRemainingCurrentIteration\n        this._favoriteColorFound = props.favoriteColorFound\n\n        const data: ColorsLoadData = {\n            next1000: arys.colors,\n            eliminated: arys.eliminated,\n            selected: arys.selected,\n        }\n\n        this._buildColors(data)\n    }\n\n    /**\n     * The primary purpose of this method is to allow for easier testing.\n     * This method is overridded in the test class so that a worker thread is\n     * not used.\n     */\n    protected _buildColors(data?: ColorsLoadData) {\n        this._colors = new Colors(data)\n    }\n\n    private _select(num: 1 | 2): void {\n        const [selected, rejected] = this._colors.select(num)\n        this.selectedColors.add(selected)\n        this.eliminatedColors.add(rejected)\n    }\n\n    private _checkForNewIteration() {\n        if (this.colorsRemainingCurrentIteration !== 0) {\n            return\n        }\n\n        this._colorsRemainingCurrentIteration =\n            Game.MAX_COLORS / 2 ** this.currentIteration\n        this._currentIteration++\n        this.selectedColors.reset()\n    }\n\n    private _checkForFavoriteColor() {\n        this._favoriteColorFound = this.colorsRemainingCurrentIteration === 1\n    }\n}\n", "export interface User {\n    avatar?: string\n    collectionId: string\n    collectionName: string\n    created: Date\n    email: string\n    emailVisibility: boolean\n    id: string\n    name?: string\n    updated: Date\n    username?: string\n    verified: string\n}\n\nexport function getUser(obj: {}): User {\n    return obj as User\n}\n\nexport function guestUser(): User {\n    return getUser({\n        id: 'guest',\n    })\n}\n", "import { Ui } from './ui/ui'\nimport { User, getUser } from './user'\n\nexport class Auth {\n    static saveLocal(user: User) {\n        localStorage.setItem('hasUserSaved', 'true')\n        localStorage.setItem('id', user.id)\n        localStorage.setItem('email', user.email)\n    }\n\n    static clearLocal() {\n        localStorage.removeItem('hasUserSaved')\n        localStorage.removeItem('id')\n        localStorage.removeItem('email')\n    }\n\n    static shouldSaveLocal(form: HTMLFormElement) {\n        const stayLoggedInElement = form.elements.namedItem('stayLoggedIn')\n\n        return (\n            stayLoggedInElement instanceof HTMLInputElement &&\n            stayLoggedInElement.checked\n        )\n    }\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport async function tryLocalLogin(): Promise<User | Error> {\n    if (!localStorage.getItem('hasUserSaved')) {\n        return Error('User ID is not saved locally')\n    }\n\n    Ui.updateAuth(localStorage.getItem('email') as string)\n\n    const id = localStorage.getItem('id') as string\n\n    const response = await _fetchUsers(`records/${id}`)\n\n    return await _parseResponse(response)\n}\n\nasync function _parseResponse(\n    response: Response,\n    propName?: string\n): Promise<User | Error> {\n    const json = await response.json()\n\n    if (response.status != 200) {\n        return Error(json.message)\n    }\n\n    return getUser(propName ? json[propName] : json)\n}\n\nasync function _fetchUsers(path: string, data?: AuthData): Promise<Response> {\n    return await fetch(\n        `http://34.42.14.226:8090/api/collections/users/${path}`,\n        data\n    )\n}\n", "import { App } from './app'\nimport { GameProps, Game } from './game'\nimport { User, getUser } from './user'\n\ninterface GameData {\n    id: string\n    user: string\n    properties: GameProps\n    eliminatedColors: string\n    selectedColors: string\n    colors: string\n}\n\ninterface AuthData {\n    method: 'post'\n    body: FormData\n}\n\nexport class Db {\n    private _path: string\n    private _pendingSave: boolean\n\n    constructor(protocol: string, ip: string, port: string) {\n        this._path = `${protocol}://${ip}:${port}`\n        this._pendingSave = false\n    }\n\n    async try(action: string, formElement: HTMLFormElement) {\n        const form = new FormData(formElement)\n\n        const data = {\n            method: 'post',\n            body: form,\n        } as const\n\n        if (action === 'login') {\n            return await this.tryLogin(data)\n        }\n\n        const email = form.get('identity') as string\n        form.set('email', email)\n        if (action === 'changepw') {\n            return await this.tryChangePw(data)\n        }\n\n        const pw = form.get('password') as string | null\n        if (!pw || !email) {\n            return Error(\n                'Something went wrong - please refresh the page and try again.'\n            )\n        }\n\n        form.append('passwordConfirm', pw)\n\n        return await this.trySignup(data)\n    }\n\n    async tryLogin(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('auth-with-password', data)\n\n        return await this._parseResponse(response, 'record')\n    }\n\n    private async trySignup(data: AuthData): Promise<User | Error> {\n        const response = await this._fetchUsers('records', data)\n\n        return await this._parseResponse(response)\n    }\n\n    private async tryChangePw(data: AuthData): Promise<Error> {\n        return new Error(\"Method 'tryChangePw' is not implemented!\")\n    }\n\n    async save(game: Game, userId: string): Promise<boolean> {\n        if (userId === 'guest') {\n            return false\n        }\n\n        if (this._pendingSave) {\n            return false\n        }\n\n        this._pendingSave = true\n\n        const prevGame = await this._getGameIfOneExists(userId)\n\n        const rv = await this._createOrUpdate(game, userId, prevGame?.id)\n\n        this._pendingSave = false\n\n        return rv\n    }\n\n    async load(userId: string): Promise<Game | Error> {\n        const game = await this._getGameIfOneExists(userId)\n\n        if (!game) {\n            return new Error(`User ID '${userId}' does not have a game saved.`)\n        }\n\n        const [eliminated, selected, colors] = await this._getFiles(game)\n\n        if (!eliminated || !selected || !colors) {\n            return new Error('Error loading game.')\n        }\n\n        return new Game(\n            {\n                eliminated,\n                selected,\n                colors,\n            },\n            game.properties\n        )\n    }\n\n    private get path() {\n        return {\n            games: this._path + '/api/collections/games',\n            files: this._path + '/api/files/games',\n            users: this._path + '/api/collections/users',\n        }\n    }\n\n    private async _createOrUpdate(\n        game: Game,\n        userId: string,\n        gameId?: string\n    ): Promise<boolean> {\n        const form = this._buildForm(game, userId)\n\n        let response: Response\n\n        if (gameId) {\n            response = await this._patch(form, gameId)\n        } else {\n            response = await this._post(form)\n        }\n        return true\n    }\n\n    private _buildForm(game: Game, userId: string): FormData {\n        const elimColorBlob = game.eliminatedColors.blob\n        const selectColorBlob = game.selectedColors.blob\n        const colorsBlob = new Blob([game.next1000Colors])\n\n        const form = new FormData()\n\n        form.set('eliminatedColors', elimColorBlob)\n        form.set('selectedColors', selectColorBlob)\n        form.set('colors', colorsBlob)\n        form.set('properties', JSON.stringify(game.properties))\n        form.set('user', userId)\n\n        return form\n    }\n\n    private async _post(form: FormData): Promise<Response> {\n        const data = {\n            method: 'POST',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records`, data)\n    }\n\n    private async _patch(form: FormData, id: string): Promise<Response> {\n        const data = {\n            method: 'PATCH',\n            body: form,\n        }\n\n        return fetch(`${this.path.games}/records/${id}`, data)\n    }\n\n    private async _getFiles(game: GameData) {\n        return Promise.all([\n            this._getFile(game.id, game.eliminatedColors),\n            this._getFile(game.id, game.selectedColors),\n            this._getFile(game.id, game.colors),\n        ])\n    }\n\n    private async _getFile(\n        gameId: string,\n        filename: string\n    ): Promise<ArrayBuffer | null> {\n        try {\n            const res = await fetch(`${this.path.files}/${gameId}/${filename}`)\n            if (!res.ok) {\n                return null\n            }\n\n            return await res.arrayBuffer()\n        } catch (error) {\n            return null\n        }\n    }\n\n    private async _getGameIfOneExists(\n        userId: string\n    ): Promise<GameData | null> {\n        try {\n            const response = await fetch(\n                `${this.path.games}/records?filter=(user='${userId}')`\n            )\n\n            if (!response.ok) {\n                return null\n            }\n\n            const json = await response.json()\n\n            if (json.totalItems != 1) {\n                return null\n            }\n\n            const game = json.items[0]\n\n            return {\n                id: game.id,\n                user: game.user,\n                properties: game.properties,\n                eliminatedColors: game.eliminatedColors,\n                selectedColors: game.selectedColors,\n                colors: game.colors,\n            }\n        } catch (error) {\n            console.log(error)\n\n            return null\n        }\n    }\n\n    private async _fetchUsers(\n        path: string,\n        data?: AuthData\n    ): Promise<Response> {\n        return await fetch(`${this.path.users}/${path}`, data)\n    }\n\n    private async _parseResponse(\n        response: Response,\n        propName?: string\n    ): Promise<User | Error> {\n        const json = await response.json()\n\n        if (response.status != 200) {\n            return Error(json.message)\n        }\n\n        return getUser(propName ? json[propName] : json)\n    }\n}\n", "export enum NotifyType {\n    information = 'information',\n    error = 'error',\n}\n\nexport function notify(type: NotifyType, message: string) {\n    const container = document.querySelector('.notification-container')\n\n    if (!container) {\n        return\n    }\n\n    const notification = _make('div', 'notification', type.toString())\n    const coloredSection = _make('div')\n    const messageSection = _make('div')\n\n    messageSection.textContent = message\n\n    notification.append(coloredSection, messageSection)\n    container.appendChild(notification)\n\n    setTimeout(() => {\n        notification.style.opacity = '0'\n        setTimeout(() => notification.remove(), 2500)\n    }, 5000)\n}\n\nfunction _make(type: string, ...classes: string[]) {\n    const elem = document.createElement(type)\n    for (const cl of classes) {\n        elem.classList.add(cl)\n    }\n    return elem\n}\n", "import { Ui } from './ui/ui'\nimport { Game } from './game'\nimport { Auth, tryLocalLogin } from './auth'\nimport { User, guestUser } from './user'\nimport { Db } from './db'\nimport { NotifyType, notify } from './notification'\n\nfunction assertType<T>(\n    elem: any,\n    cls: new (...a: any) => T\n): asserts elem is T {\n    if (!(elem instanceof cls)) {\n        notify(\n            NotifyType.error,\n            'Something went wrong - please refresh the page and try again.'\n        )\n        throw new TypeError('Element is not an instance of ' + cls)\n    }\n}\n\nfunction getAndAssertType<T>(selector: string, cls: new (...a: any) => T): T {\n    const elem = document.querySelector(selector)\n    assertType(elem, cls)\n    return elem\n}\n\nfunction getButton(selector: string): HTMLButtonElement {\n    return getAndAssertType(selector, HTMLButtonElement)\n}\n\nexport class App {\n    private _user: User\n    private _game: Game\n    private db: Db\n\n    constructor() {\n        this._user = guestUser()\n        this._game = new Game()\n        this.db = new Db('http', '34.42.14.226', '8090')\n    }\n\n    async init() {\n        const user = await tryLocalLogin()\n\n        if (user instanceof Error || !user) {\n            Ui.updateGame(this.game)\n            return\n        }\n\n        this._user = user\n\n        await this.loadGame()\n    }\n\n    get user(): User {\n        return this._user\n    }\n\n    get game() {\n        return this._game\n    }\n\n    set game(game: Game) {\n        this._game = game\n    }\n\n    async loadGame(): Promise<boolean> {\n        if (!this.isLoggedIn()) {\n            return false\n        }\n\n        const game = await this.db.load(this._user.id)\n\n        if (game instanceof Error) {\n            notify(NotifyType.error, game.message)\n            return false\n        }\n\n        this._game = game\n        return true\n    }\n\n    async saveGame(): Promise<boolean> {\n        if (!this.isLoggedIn()) {\n            return false\n        }\n\n        await this.db.save(this._game, this._user.id)\n        return true\n    }\n\n    logoutUser(e: Event) {\n        if (e.target instanceof HTMLFormElement) {\n            e.target.reset()\n        }\n\n        this._user = guestUser()\n        Auth.clearLocal()\n    }\n\n    private set user(user: User) {\n        this._user = user\n    }\n\n    private isLoggedIn() {\n        return this._user.id !== 'guest'\n    }\n\n    async trySignupOrLogin(e: SubmitEvent) {\n        const form = e.target\n        assertType(form, HTMLFormElement)\n\n        console.log(this)\n\n        const user = await this.db.try(e.submitter?.dataset.action!, form)\n\n        if (user instanceof Error) {\n            notify(NotifyType.error, user.message)\n            return\n        }\n\n        this._user = user\n\n        if (Auth.shouldSaveLocal(form)) {\n            Auth.saveLocal(user)\n        } else {\n            Auth.clearLocal()\n        }\n\n        form.reset()\n        return user\n    }\n\n    debug() {\n        console.log(this)\n    }\n\n    shuffleGameColors() {\n        this.gameAction('shuffle')\n    }\n\n    resetGame() {\n        this.gameAction('reset')\n    }\n\n    selectGameColor(num: 1 | 2) {\n        this.gameAction('selectColor', num)\n    }\n\n    private async gameAction(\n        action: 'shuffle' | 'reset' | 'selectColor',\n        num?: 1 | 2\n    ) {\n        switch (action) {\n            case 'shuffle':\n                this.game.shuffleColors()\n                break\n            case 'reset':\n                this.game.reset()\n                break\n            case 'selectColor':\n                if (num) {\n                    this._game.selectColor(num)\n                }\n                break\n            default:\n                break\n        }\n        this.db.save(this._game, this._user.id)\n    }\n}\n", "import { App } from './app'\nimport { Ui } from './ui/ui'\n\nconst app = new App()\nconst ui = new Ui()\n\nui.add('.login', 'loginSignupForm', 'submit', loginSignupHandler)\nui.add('#logout-btn', 'logoutButton', 'click', logoutHandler)\nui.add('.debug', 'debugButon', 'click', debugHandler)\nui.add('.new-colors', 'shuffleColorsButton', 'click', shuffleHandler)\nui.add('.clear-data', 'resetGameButton', 'click', resetHandler)\nui.add('#color1', 'color1', 'click', selectColor1Handler)\nui.add('#color2', 'color2', 'click', selectColor2Handler)\n\nasync function main() {\n    await app.init()\n    Ui.updateAll(app)\n}\n\nmain()\n\nasync function loginSignupHandler(e: Event) {\n    if (!(e instanceof SubmitEvent)) {\n        return\n    }\n\n    await app.trySignupOrLogin(e)\n    await app.loadGame()\n\n    Ui.updateAll(app)\n}\n\nasync function logoutHandler(e: Event) {\n    app.logoutUser(e)\n    app.resetGame()\n    Ui.updateAll(app)\n}\n\nfunction debugHandler() {\n    app.debug()\n}\n\nfunction shuffleHandler() {\n    app.shuffleGameColors()\n    Ui.updateAll(app)\n}\n\nfunction resetHandler() {\n    app.resetGame()\n    Ui.updateAll(app)\n}\n\nfunction selectColor1Handler() {\n    selectColor(1)\n}\n\nfunction selectColor2Handler() {\n    selectColor(2)\n}\n\nfunction selectColor(num: 1 | 2) {\n    app.selectGameColor(num)\n    Ui.updateAll(app)\n}\n"],
  "mappings": "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",
  "names": ["app", "color", "color"]
}
